/**
 * @license
 * Copyright 2022-2025 Project CHIP Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class ImportAliases {
  #parent;
  #direct = {};
  #wildcard = Array();
  constructor(localAliases, parent) {
    for (const path in localAliases) {
      const resolvesTo = localAliases[path];
      let wildcardAt = path.indexOf("*");
      if (wildcardAt === -1) {
        this.#direct[path] = resolvesTo;
        continue;
      }
      const inputPrefix = path.substring(0, wildcardAt);
      const inputSuffix = path.substring(wildcardAt + 1);
      wildcardAt = resolvesTo.indexOf("*");
      if (wildcardAt === -1) {
        this.#wildcard.push({
          inputPrefix,
          inputSuffix,
          includeGlob: false,
          outputPrefix: resolvesTo,
          outputSuffix: ""
        });
      } else {
        this.#wildcard.push({
          inputPrefix,
          inputSuffix,
          includeGlob: true,
          outputPrefix: resolvesTo.substring(0, wildcardAt),
          outputSuffix: resolvesTo.substring(wildcardAt + 1)
        });
      }
    }
    this.#parent = parent;
  }
  rewrite(path) {
    if (path.startsWith("#")) {
      const direct = this.#direct[path];
      if (direct) {
        return direct;
      }
      for (const alias of this.#wildcard) {
        if (path.startsWith(alias.inputPrefix) && path.endsWith(alias.inputSuffix)) {
          if (alias.includeGlob) {
            return alias.outputPrefix + path.substring(alias.inputPrefix.length, path.length - alias.inputSuffix.length) + alias.outputSuffix;
          }
          return alias.outputPrefix;
        }
      }
    }
    return this.#parent?.rewrite(path) ?? path;
  }
}
export {
  ImportAliases
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL3V0aWwvaW1wb3J0LWFsaWFzZXMudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyLTIwMjUgUHJvamVjdCBDSElQIEF1dGhvcnNcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBQYXJzZXMgcGFja2FnZS5qc29uIFwiaW1wb3J0c1wiIGZpZWxkcyBhbmQgcmV3cml0ZXMgbG9jYWwgaW1wb3J0cyBhY2NvcmRpbmcgdG8gdGhlIGltcG9ydCBkZWZpbml0aW9ucy5cbiAqL1xuZXhwb3J0IGNsYXNzIEltcG9ydEFsaWFzZXMge1xuICAgICNwYXJlbnQ/OiBJbXBvcnRBbGlhc2VzO1xuICAgICNkaXJlY3Q6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcbiAgICAjd2lsZGNhcmQgPSBBcnJheTxXaWxkY2FyZEFsaWFzPigpO1xuXG4gICAgY29uc3RydWN0b3IobG9jYWxBbGlhc2VzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPiwgcGFyZW50PzogSW1wb3J0QWxpYXNlcykge1xuICAgICAgICBmb3IgKGNvbnN0IHBhdGggaW4gbG9jYWxBbGlhc2VzKSB7XG4gICAgICAgICAgICBjb25zdCByZXNvbHZlc1RvID0gbG9jYWxBbGlhc2VzW3BhdGhdO1xuXG4gICAgICAgICAgICBsZXQgd2lsZGNhcmRBdCA9IHBhdGguaW5kZXhPZihcIipcIik7XG4gICAgICAgICAgICBpZiAod2lsZGNhcmRBdCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiNkaXJlY3RbcGF0aF0gPSByZXNvbHZlc1RvO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBpbnB1dFByZWZpeCA9IHBhdGguc3Vic3RyaW5nKDAsIHdpbGRjYXJkQXQpO1xuICAgICAgICAgICAgY29uc3QgaW5wdXRTdWZmaXggPSBwYXRoLnN1YnN0cmluZyh3aWxkY2FyZEF0ICsgMSk7XG5cbiAgICAgICAgICAgIHdpbGRjYXJkQXQgPSByZXNvbHZlc1RvLmluZGV4T2YoXCIqXCIpO1xuICAgICAgICAgICAgaWYgKHdpbGRjYXJkQXQgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jd2lsZGNhcmQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0UHJlZml4LFxuICAgICAgICAgICAgICAgICAgICBpbnB1dFN1ZmZpeCxcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVkZUdsb2I6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXRQcmVmaXg6IHJlc29sdmVzVG8sXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFN1ZmZpeDogXCJcIixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jd2lsZGNhcmQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0UHJlZml4LFxuICAgICAgICAgICAgICAgICAgICBpbnB1dFN1ZmZpeCxcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVkZUdsb2I6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFByZWZpeDogcmVzb2x2ZXNUby5zdWJzdHJpbmcoMCwgd2lsZGNhcmRBdCksXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFN1ZmZpeDogcmVzb2x2ZXNUby5zdWJzdHJpbmcod2lsZGNhcmRBdCArIDEpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuI3BhcmVudCA9IHBhcmVudDtcbiAgICB9XG5cbiAgICByZXdyaXRlKHBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGlmIChwYXRoLnN0YXJ0c1dpdGgoXCIjXCIpKSB7XG4gICAgICAgICAgICBjb25zdCBkaXJlY3QgPSB0aGlzLiNkaXJlY3RbcGF0aF07XG4gICAgICAgICAgICBpZiAoZGlyZWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpcmVjdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgYWxpYXMgb2YgdGhpcy4jd2lsZGNhcmQpIHtcbiAgICAgICAgICAgICAgICBpZiAocGF0aC5zdGFydHNXaXRoKGFsaWFzLmlucHV0UHJlZml4KSAmJiBwYXRoLmVuZHNXaXRoKGFsaWFzLmlucHV0U3VmZml4KSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWxpYXMuaW5jbHVkZUdsb2IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpYXMub3V0cHV0UHJlZml4ICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoLnN1YnN0cmluZyhhbGlhcy5pbnB1dFByZWZpeC5sZW5ndGgsIHBhdGgubGVuZ3RoIC0gYWxpYXMuaW5wdXRTdWZmaXgubGVuZ3RoKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpYXMub3V0cHV0U3VmZml4XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhbGlhcy5vdXRwdXRQcmVmaXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLiNwYXJlbnQ/LnJld3JpdGUocGF0aCkgPz8gcGF0aDtcbiAgICB9XG59XG5cbmludGVyZmFjZSBXaWxkY2FyZEFsaWFzIHtcbiAgICBpbnB1dFByZWZpeDogc3RyaW5nO1xuICAgIGlucHV0U3VmZml4OiBzdHJpbmc7XG4gICAgaW5jbHVkZUdsb2I6IGJvb2xlYW47XG4gICAgb3V0cHV0UHJlZml4OiBzdHJpbmc7XG4gICAgb3V0cHV0U3VmZml4OiBzdHJpbmc7XG59XG4iXSwKICAibWFwcGluZ3MiOiAiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBU08sTUFBTSxjQUFjO0FBQUEsRUFDdkI7QUFBQSxFQUNBLFVBQWtDLENBQUM7QUFBQSxFQUNuQyxZQUFZLE1BQXFCO0FBQUEsRUFFakMsWUFBWSxjQUF1QyxRQUF3QjtBQUN2RSxlQUFXLFFBQVEsY0FBYztBQUM3QixZQUFNLGFBQWEsYUFBYSxJQUFJO0FBRXBDLFVBQUksYUFBYSxLQUFLLFFBQVEsR0FBRztBQUNqQyxVQUFJLGVBQWUsSUFBSTtBQUNuQixhQUFLLFFBQVEsSUFBSSxJQUFJO0FBQ3JCO0FBQUEsTUFDSjtBQUVBLFlBQU0sY0FBYyxLQUFLLFVBQVUsR0FBRyxVQUFVO0FBQ2hELFlBQU0sY0FBYyxLQUFLLFVBQVUsYUFBYSxDQUFDO0FBRWpELG1CQUFhLFdBQVcsUUFBUSxHQUFHO0FBQ25DLFVBQUksZUFBZSxJQUFJO0FBQ25CLGFBQUssVUFBVSxLQUFLO0FBQUEsVUFDaEI7QUFBQSxVQUNBO0FBQUEsVUFDQSxhQUFhO0FBQUEsVUFDYixjQUFjO0FBQUEsVUFDZCxjQUFjO0FBQUEsUUFDbEIsQ0FBQztBQUFBLE1BQ0wsT0FBTztBQUNILGFBQUssVUFBVSxLQUFLO0FBQUEsVUFDaEI7QUFBQSxVQUNBO0FBQUEsVUFDQSxhQUFhO0FBQUEsVUFDYixjQUFjLFdBQVcsVUFBVSxHQUFHLFVBQVU7QUFBQSxVQUNoRCxjQUFjLFdBQVcsVUFBVSxhQUFhLENBQUM7QUFBQSxRQUNyRCxDQUFDO0FBQUEsTUFDTDtBQUFBLElBQ0o7QUFDQSxTQUFLLFVBQVU7QUFBQSxFQUNuQjtBQUFBLEVBRUEsUUFBUSxNQUFzQjtBQUMxQixRQUFJLEtBQUssV0FBVyxHQUFHLEdBQUc7QUFDdEIsWUFBTSxTQUFTLEtBQUssUUFBUSxJQUFJO0FBQ2hDLFVBQUksUUFBUTtBQUNSLGVBQU87QUFBQSxNQUNYO0FBQ0EsaUJBQVcsU0FBUyxLQUFLLFdBQVc7QUFDaEMsWUFBSSxLQUFLLFdBQVcsTUFBTSxXQUFXLEtBQUssS0FBSyxTQUFTLE1BQU0sV0FBVyxHQUFHO0FBQ3hFLGNBQUksTUFBTSxhQUFhO0FBQ25CLG1CQUNJLE1BQU0sZUFDTixLQUFLLFVBQVUsTUFBTSxZQUFZLFFBQVEsS0FBSyxTQUFTLE1BQU0sWUFBWSxNQUFNLElBQy9FLE1BQU07QUFBQSxVQUVkO0FBQ0EsaUJBQU8sTUFBTTtBQUFBLFFBQ2pCO0FBQUEsTUFDSjtBQUFBLElBQ0o7QUFDQSxXQUFPLEtBQUssU0FBUyxRQUFRLElBQUksS0FBSztBQUFBLEVBQzFDO0FBQ0o7IiwKICAibmFtZXMiOiBbXQp9Cg==
