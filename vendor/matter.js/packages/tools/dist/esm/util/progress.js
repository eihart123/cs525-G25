/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { stderr, stdout } from "node:process";
import { screen } from "../ansi-text/screen.js";
import { std } from "../ansi-text/std.js";
import { ansi } from "../ansi-text/text-builder.js";
const SPINNER = "\u25D0\u25D3\u25D1\u25D2";
const SPINNER_INTERVAL = 100;
function packageIdentity(pkg) {
  let identity = ansi.bold(pkg.json.name).toString();
  if (pkg.json.version) {
    identity = `${identity}@${pkg.json.version}`;
  }
  return identity;
}
const writeStatus = (() => {
  let lastStatus;
  let needNewline = false;
  function intercept(stream) {
    const actualWrite = stream.write;
    stream.write = (payload, ...params) => {
      if (lastStatus) {
        actualWrite.call(stream, "\n");
        lastStatus = void 0;
      }
      if (!payload.length) {
        return true;
      }
      needNewline = payload[payload.length - 1] !== "\n" && payload[payload.length - 1] !== "\r";
      return actualWrite.call(stream, payload, ...params);
    };
  }
  intercept(stdout);
  intercept(stderr);
  return function writeStatus2(text, willOverwrite = false) {
    text += willOverwrite ? `${screen.erase.toEol}\r` : `${screen.erase.toEol}
`;
    if (text === lastStatus) {
      return;
    }
    std.out.state({ buffer: true }, () => {
      if (lastStatus) {
        lastStatus = void 0;
      } else if (needNewline && !text.startsWith("\n")) {
        std.out("\n");
      }
      std.out.writeTruncated(text);
    });
    lastStatus = text;
  };
})();
class Progress {
  status = Progress.Status.Startup;
  #ongoingText;
  #start;
  #spinner = "\u29D7";
  #refreshInterval;
  #spinnerPosition = 0;
  #spinnerWindow;
  #subtasks = Array();
  constructor() {
  }
  emphasize(text) {
    return ansi.bold(`${text}`);
  }
  deemphasize(text) {
    return ansi.dim(`${text}`);
  }
  skip(why, pkg) {
    std.out.write(ansi.dim(`Skip ${packageIdentity(pkg)}: ${why}

`));
  }
  startup(what, pkgOrOverwrite) {
    if (process.stdout.isTTY) {
      this.#updateSpinner();
      this.#refreshInterval = setInterval(this.refresh.bind(this), SPINNER_INTERVAL);
    }
    this.status = Progress.Status.Startup;
    if (pkgOrOverwrite === void 0 || typeof pkgOrOverwrite === "boolean") {
      writeStatus(what, pkgOrOverwrite ?? true);
    } else {
      writeStatus(`${what} ${packageIdentity(pkgOrOverwrite)}`);
    }
  }
  update(text, extra) {
    this.status = Progress.Status.Ongoing;
    let duration;
    if (this.#start === void 0) {
      this.#start = (/* @__PURE__ */ new Date()).getTime();
      duration = "";
    } else {
      duration = this.#duration;
    }
    extra = extra === void 0 ? "" : ` ${extra}`;
    this.#ongoingText = `${text} ${duration}${extra}`;
    this.#writeOngoing();
  }
  #writeOngoing() {
    if (!this.#ongoingText) {
      return;
    }
    const subtask = this.#subtasks.length ? ansi.dim(` (${this.#subtasks[this.#subtasks.length - 1]})`) : "";
    writeStatus(`  ${ansi.yellow(this.#spinner)} ${this.#ongoingText}${subtask}`, true);
  }
  success(text) {
    this.status = Progress.Status.Success;
    writeStatus(`  ${ansi.green("\u2713")} ${text} ${this.#duration}`);
    this.#start = this.#ongoingText = void 0;
  }
  failure(text) {
    this.status = Progress.Status.Failure;
    writeStatus(`  ${ansi.bright.red("\u2717")} ${text} ${this.#duration}`);
    this.#start = this.#ongoingText = void 0;
  }
  info(label, value) {
    if (value) {
      label = `${ansi.dim(label)} ${value}`;
    }
    writeStatus(`  ${ansi.dim("\u2023")} ${label}`);
  }
  warn(text) {
    std.out.write(`    ${ansi.yellow("Warning:")} ${text}
`);
  }
  close() {
    if (this.#refreshInterval) {
      clearInterval(this.#refreshInterval);
      this.#refreshInterval = void 0;
    }
    writeStatus("");
  }
  [Symbol.dispose]() {
    this.close();
  }
  refresh() {
    if (this.#updateSpinner()) {
      this.#writeOngoing();
    }
  }
  async subtask(text, fn) {
    this.#subtasks.push(text);
    try {
      await fn();
    } finally {
      this.#subtasks.pop();
    }
  }
  #updateSpinner() {
    if (!stdout.isTTY) {
      return false;
    }
    const window = Math.floor((/* @__PURE__ */ new Date()).getTime() / SPINNER_INTERVAL);
    if (this.#spinnerWindow === window) {
      return false;
    }
    this.#spinnerWindow = window;
    this.#spinnerPosition = (this.#spinnerPosition + 1) % SPINNER.length;
    this.#spinner = SPINNER[this.#spinnerPosition];
    return true;
  }
  async run(what, fn) {
    this.update(what);
    let result;
    try {
      result = await fn();
    } catch (e) {
      this.failure(what);
      throw e;
    }
    this.success(what);
    return result;
  }
  get #duration() {
    let ms = this.#start ? (/* @__PURE__ */ new Date()).getTime() - this.#start : 0;
    if (ms < 1e3) {
      ms = Math.round(ms / 10) / 100;
    } else if (ms < 1e4) {
      ms = Math.round(ms / 100) / 10;
    } else {
      ms = Math.trunc(ms / 1e3);
    }
    return `${ansi.dim.yellow}(${ms}s)${ansi.not.dim.not.yellow}`;
  }
}
((Progress2) => {
  let Status;
  ((Status2) => {
    Status2["Startup"] = "startup";
    Status2["Ongoing"] = "ongoing";
    Status2["Success"] = "success";
    Status2["Failure"] = "failure";
  })(Status = Progress2.Status || (Progress2.Status = {}));
})(Progress || (Progress = {}));
export {
  Progress
};
//# sourceMappingURL=data:application/json;base64,
