/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { GLOBSTAR, Minimatch } from "minimatch";
import { FilesystemSync } from "./file.js";
class GlobError extends Error {
}
function globSync(pattern, fs = FilesystemSync()) {
  if (typeof pattern === "string") {
    return [...globOneSync(pattern, fs)];
  }
  const result = Array();
  for (const p of pattern) {
    result.push(...globOneSync(p, fs));
  }
  return result;
}
function globOneSync(pattern, fs) {
  const mm = new Minimatch(pattern.replace(/\\/g, "/"), {});
  const results = /* @__PURE__ */ new Set();
  for (const part of mm.set) {
    for (const path of globOnePartSync(mm, part, fs)) {
      results.add(path);
    }
  }
  return results;
}
function globOnePartSync(mm, segments, fs) {
  let rootPath = "";
  let didOne = false;
  while (typeof segments[0] === "string") {
    if (didOne) {
      rootPath += "/";
    } else {
      didOne = true;
    }
    rootPath += segments.shift();
  }
  if (!segments.length) {
    const stat = fs.stat(rootPath);
    if (stat?.[rootPath.endsWith("/") ? "isDirectory" : "isFile"]) {
      return [rootPath];
    }
    return [];
  }
  const results = /* @__PURE__ */ new Set();
  function match(path, segments2) {
    if (!segments2.length) {
      results.add(path);
      return;
    }
    if (typeof segments2[0] === "string") {
      const subpath = fs.resolve(path, segments2[0]);
      if (fs.stat(fs.resolve(path, segments2[0]))) {
        match(subpath, segments2.slice(1));
        return;
      }
    }
    if (segments2.length === 1 && segments2[0] === GLOBSTAR) {
      results.add(path);
    }
    const subnames = fs.readdir(path);
    if (!subnames) {
      return;
    }
    for (const subname of subnames) {
      const subpath = fs.resolve(path, subname);
      if (segments2[0] !== GLOBSTAR) {
        if (mm.matchOne([subname], segments2, true)) {
          match(subpath, segments2.slice(1));
        }
        continue;
      }
      if (segments2.length > 1) {
        if (mm.matchOne([subname], segments2.slice(1), true)) {
          match(subpath, segments2.slice(2));
        }
      }
      match(subpath, segments2);
    }
  }
  match(rootPath, segments);
  return results;
}
export {
  GlobError,
  globSync
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL3V0aWwvZ2xvYi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjItMjAyNSBNYXR0ZXIuanMgQXV0aG9yc1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQgeyBHTE9CU1RBUiwgTWluaW1hdGNoLCBQYXJzZVJldHVybkZpbHRlcmVkIH0gZnJvbSBcIm1pbmltYXRjaFwiO1xuaW1wb3J0IHsgRmlsZXN5c3RlbVN5bmMgfSBmcm9tIFwiLi9maWxlLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBHbG9iRXJyb3IgZXh0ZW5kcyBFcnJvciB7fVxuXG5leHBvcnQgZnVuY3Rpb24gZ2xvYlN5bmMocGF0dGVybjogc3RyaW5nIHwgc3RyaW5nW10sIGZzID0gRmlsZXN5c3RlbVN5bmMoKSkge1xuICAgIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gWy4uLmdsb2JPbmVTeW5jKHBhdHRlcm4sIGZzKV07XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gQXJyYXk8c3RyaW5nPigpO1xuICAgIGZvciAoY29uc3QgcCBvZiBwYXR0ZXJuKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKC4uLmdsb2JPbmVTeW5jKHAsIGZzKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZ2xvYk9uZVN5bmMocGF0dGVybjogc3RyaW5nLCBmczogRmlsZXN5c3RlbVN5bmMpIHtcbiAgICAvLyBQYXJzZSB0aGUgZ2xvYlxuICAgIGNvbnN0IG1tID0gbmV3IE1pbmltYXRjaChwYXR0ZXJuLnJlcGxhY2UoL1xcXFwvZywgXCIvXCIpLCB7fSk7XG4gICAgY29uc3QgcmVzdWx0cyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICAgIGZvciAoY29uc3QgcGFydCBvZiBtbS5zZXQpIHtcbiAgICAgICAgZm9yIChjb25zdCBwYXRoIG9mIGdsb2JPbmVQYXJ0U3luYyhtbSwgcGFydCwgZnMpKSB7XG4gICAgICAgICAgICByZXN1bHRzLmFkZChwYXRoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gZ2xvYk9uZVBhcnRTeW5jKG1tOiBNaW5pbWF0Y2gsIHNlZ21lbnRzOiBQYXJzZVJldHVybkZpbHRlcmVkW10sIGZzOiBGaWxlc3lzdGVtU3luYykge1xuICAgIC8vIEZpbmQgdGhlIHN0YXJ0aW5nIHBhdGhcbiAgICBsZXQgcm9vdFBhdGggPSBcIlwiO1xuICAgIGxldCBkaWRPbmUgPSBmYWxzZTtcbiAgICB3aGlsZSAodHlwZW9mIHNlZ21lbnRzWzBdID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmIChkaWRPbmUpIHtcbiAgICAgICAgICAgIHJvb3RQYXRoICs9IFwiL1wiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGlkT25lID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByb290UGF0aCArPSBzZWdtZW50cy5zaGlmdCgpIGFzIHN0cmluZztcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBhcmUgb3V0IG9mIHNlZ21lbnRzLCB0aGlzIGlzIG5vdCBhIGdsb2IuICBKdXN0IGNoZWNrIGZvciBwcmVzZW5jZVxuICAgIGlmICghc2VnbWVudHMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHN0YXQgPSBmcy5zdGF0KHJvb3RQYXRoKTtcblxuICAgICAgICBpZiAoc3RhdD8uW3Jvb3RQYXRoLmVuZHNXaXRoKFwiL1wiKSA/IFwiaXNEaXJlY3RvcnlcIiA6IFwiaXNGaWxlXCJdKSB7XG4gICAgICAgICAgICByZXR1cm4gW3Jvb3RQYXRoXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICAvLyBXYWxrIGZpbGVzeXN0ZW0gYW5kIGFwcGx5IGdsb2JcbiAgICBjb25zdCByZXN1bHRzID0gbmV3IFNldDxzdHJpbmc+KCk7XG5cbiAgICBmdW5jdGlvbiBtYXRjaChwYXRoOiBzdHJpbmcsIHNlZ21lbnRzOiBQYXJzZVJldHVybkZpbHRlcmVkW10pIHtcbiAgICAgICAgLy8gSWYgdGhlIGZpbHRlciBpcyBlbXB0eSB0aGVuIG1hdGNoIGN1cnJlbnQgcGF0aFxuICAgICAgICBpZiAoIXNlZ21lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0cy5hZGQocGF0aCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBmaWx0ZXIgc3RhcnRzIHdpdGhvdXQgbWFnaWMgdGhlbiBqdXN0IHN0YXQgdGhhdCBvbmUgcGF0aFxuICAgICAgICBpZiAodHlwZW9mIHNlZ21lbnRzWzBdID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBjb25zdCBzdWJwYXRoID0gZnMucmVzb2x2ZShwYXRoLCBzZWdtZW50c1swXSk7XG4gICAgICAgICAgICBpZiAoZnMuc3RhdChmcy5yZXNvbHZlKHBhdGgsIHNlZ21lbnRzWzBdKSkpIHtcbiAgICAgICAgICAgICAgICBtYXRjaChzdWJwYXRoLCBzZWdtZW50cy5zbGljZSgxKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgZmlsdGVyIGlzIGp1c3QgR0xPQlNUQVIgdGhlbiBhbGwgcGF0aHMgbWF0Y2ggYnV0IHNlYXJjaCBjb250aW51ZXNcbiAgICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCA9PT0gMSAmJiBzZWdtZW50c1swXSA9PT0gR0xPQlNUQVIpIHtcbiAgICAgICAgICAgIHJlc3VsdHMuYWRkKHBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmlsdGVyIHN0YXJ0cyB3aXRoIG1hZ2ljIHNvIGxvYWQgZGlyZWN0b3J5IGVudHJpZXMgdG8gbWF0Y2hcbiAgICAgICAgY29uc3Qgc3VibmFtZXMgPSBmcy5yZWFkZGlyKHBhdGgpO1xuICAgICAgICBpZiAoIXN1Ym5hbWVzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUZXN0IGVhY2ggZGlyZWN0b3J5IGVudHJ5XG4gICAgICAgIGZvciAoY29uc3Qgc3VibmFtZSBvZiBzdWJuYW1lcykge1xuICAgICAgICAgICAgY29uc3Qgc3VicGF0aCA9IGZzLnJlc29sdmUocGF0aCwgc3VibmFtZSk7XG5cbiAgICAgICAgICAgIC8vIEFueXRoaW5nIGJ1dCBHTE9CU1RBUiBpcyAxOjEgc3VibmFtZS9zZWdtZW50IG1hdGNoXG4gICAgICAgICAgICBpZiAoc2VnbWVudHNbMF0gIT09IEdMT0JTVEFSKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1tLm1hdGNoT25lKFtzdWJuYW1lXSwgc2VnbWVudHMsIHRydWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoKHN1YnBhdGgsIHNlZ21lbnRzLnNsaWNlKDEpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEdMT0JTVEFSIG1hdGNoZXMgbm90aGluZyBzbyB0ZXN0IHNlY29uZCBzZWdtZW50XG4gICAgICAgICAgICBpZiAoc2VnbWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGlmIChtbS5tYXRjaE9uZShbc3VibmFtZV0sIHNlZ21lbnRzLnNsaWNlKDEpLCB0cnVlKSkge1xuICAgICAgICAgICAgICAgICAgICBtYXRjaChzdWJwYXRoLCBzZWdtZW50cy5zbGljZSgyKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHTE9CU1RBUiBtYXRjaGVzIGV2ZXJ5dGhpbmdcbiAgICAgICAgICAgIG1hdGNoKHN1YnBhdGgsIHNlZ21lbnRzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG1hdGNoKHJvb3RQYXRoLCBzZWdtZW50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
