/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { spawn } from "node:child_process";
import { platform } from "node:os";
import colors from "ansi-colors";
async function execute(bin, argv, env) {
  return new Promise((resolve, reject) => {
    let finished = false;
    const options = {
      stdio: "inherit"
    };
    if (platform() === "win32") {
      options.shell = true;
    }
    if (env !== void 0) {
      options.env = { ...process.env, ...env };
    }
    const proc = spawn(bin, argv, options);
    process.on("SIGUSR2", () => {
      proc.kill("SIGUSR2");
    });
    proc.on("error", (e) => {
      finished = true;
      reject(e);
    });
    proc.on("close", (code) => {
      if (finished) {
        return;
      }
      finished = true;
      resolve(code ?? 1);
    });
  });
}
async function executeNode(script, argv, nodeArgv = Array()) {
  argv = ["--enable-source-maps", ...nodeArgv, script, ...argv];
  if (process.env.MATTER_RUN_ECHO) {
    const command = colors.whiteBright(`node ${argv.join(" ")}`);
    process.stdout.write(`${colors.greenBright("Matter execute:")} ${command}
`);
  }
  const env = {};
  return execute("node", argv, env);
}
export {
  execute,
  executeNode
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL3J1bm5pbmcvZXhlY3V0ZS50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjItMjAyNSBNYXR0ZXIuanMgQXV0aG9yc1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQgeyBzcGF3biwgU3Bhd25PcHRpb25zIH0gZnJvbSBcIm5vZGU6Y2hpbGRfcHJvY2Vzc1wiO1xuaW1wb3J0IHsgcGxhdGZvcm0gfSBmcm9tIFwibm9kZTpvc1wiO1xuXG5pbXBvcnQgY29sb3JzIGZyb20gXCJhbnNpLWNvbG9yc1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZShiaW46IHN0cmluZywgYXJndjogc3RyaW5nW10sIGVudj86IHR5cGVvZiBwcm9jZXNzLmVudikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxudW1iZXI+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgbGV0IGZpbmlzaGVkID0gZmFsc2U7XG5cbiAgICAgICAgY29uc3Qgb3B0aW9uczogU3Bhd25PcHRpb25zID0ge1xuICAgICAgICAgICAgc3RkaW86IFwiaW5oZXJpdFwiLFxuICAgICAgICB9O1xuICAgICAgICBpZiAocGxhdGZvcm0oKSA9PT0gXCJ3aW4zMlwiKSB7XG4gICAgICAgICAgICBvcHRpb25zLnNoZWxsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW52ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuZW52ID0geyAuLi5wcm9jZXNzLmVudiwgLi4uZW52IH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwcm9jID0gc3Bhd24oYmluLCBhcmd2LCBvcHRpb25zKTtcblxuICAgICAgICAvLyBQcm94eSBTSUdVU1IyIHRvIHRoZSBjaGlsZCBwcm9jZXNzXG4gICAgICAgIHByb2Nlc3Mub24oXCJTSUdVU1IyXCIsICgpID0+IHtcbiAgICAgICAgICAgIHByb2Mua2lsbChcIlNJR1VTUjJcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHByb2Mub24oXCJlcnJvclwiLCBlID0+IHtcbiAgICAgICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcHJvYy5vbihcImNsb3NlXCIsIGNvZGUgPT4ge1xuICAgICAgICAgICAgaWYgKGZpbmlzaGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluaXNoZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICByZXNvbHZlKGNvZGUgPz8gMSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZU5vZGUoc2NyaXB0OiBzdHJpbmcsIGFyZ3Y6IHN0cmluZ1tdLCBub2RlQXJndiA9IEFycmF5PHN0cmluZz4oKSkge1xuICAgIGFyZ3YgPSBbXCItLWVuYWJsZS1zb3VyY2UtbWFwc1wiLCAuLi5ub2RlQXJndiwgc2NyaXB0LCAuLi5hcmd2XTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTUFUVEVSX1JVTl9FQ0hPKSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBjb2xvcnMud2hpdGVCcmlnaHQoYG5vZGUgJHthcmd2LmpvaW4oXCIgXCIpfWApO1xuICAgICAgICBwcm9jZXNzLnN0ZG91dC53cml0ZShgJHtjb2xvcnMuZ3JlZW5CcmlnaHQoXCJNYXR0ZXIgZXhlY3V0ZTpcIil9ICR7Y29tbWFuZH1cXG5gKTtcbiAgICB9XG4gICAgY29uc3QgZW52ID0ge30gYXMgTm9kZUpTLlByb2Nlc3NFbnY7XG5cbiAgICAvLyBIbW0gdGhpcyBpcyBhIGxpdHRsZSBtdWNoIGFzIGEgZGVmYXVsdFxuICAgIC8vIGlmIChwcm9jZXNzLmVudi5NQVRURVJfTE9HX1NUQUNLX0xJTUlUID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyAgICAgZW52Lk1BVFRFUl9MT0dfU1RBQ0tfTElNSVQgPSBcIjEwMFwiO1xuICAgIC8vIH1cblxuICAgIHJldHVybiBleGVjdXRlKFwibm9kZVwiLCBhcmd2LCBlbnYpO1xufVxuIl0sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQU1BLFNBQVMsYUFBMkI7QUFDcEMsU0FBUyxnQkFBZ0I7QUFFekIsT0FBTyxZQUFZO0FBRW5CLGVBQXNCLFFBQVEsS0FBYSxNQUFnQixLQUEwQjtBQUNqRixTQUFPLElBQUksUUFBZ0IsQ0FBQyxTQUFTLFdBQVc7QUFDNUMsUUFBSSxXQUFXO0FBRWYsVUFBTSxVQUF3QjtBQUFBLE1BQzFCLE9BQU87QUFBQSxJQUNYO0FBQ0EsUUFBSSxTQUFTLE1BQU0sU0FBUztBQUN4QixjQUFRLFFBQVE7QUFBQSxJQUNwQjtBQUNBLFFBQUksUUFBUSxRQUFXO0FBQ25CLGNBQVEsTUFBTSxFQUFFLEdBQUcsUUFBUSxLQUFLLEdBQUcsSUFBSTtBQUFBLElBQzNDO0FBRUEsVUFBTSxPQUFPLE1BQU0sS0FBSyxNQUFNLE9BQU87QUFHckMsWUFBUSxHQUFHLFdBQVcsTUFBTTtBQUN4QixXQUFLLEtBQUssU0FBUztBQUFBLElBQ3ZCLENBQUM7QUFFRCxTQUFLLEdBQUcsU0FBUyxPQUFLO0FBQ2xCLGlCQUFXO0FBQ1gsYUFBTyxDQUFDO0FBQUEsSUFDWixDQUFDO0FBRUQsU0FBSyxHQUFHLFNBQVMsVUFBUTtBQUNyQixVQUFJLFVBQVU7QUFDVjtBQUFBLE1BQ0o7QUFDQSxpQkFBVztBQUVYLGNBQVEsUUFBUSxDQUFDO0FBQUEsSUFDckIsQ0FBQztBQUFBLEVBQ0wsQ0FBQztBQUNMO0FBRUEsZUFBc0IsWUFBWSxRQUFnQixNQUFnQixXQUFXLE1BQWMsR0FBRztBQUMxRixTQUFPLENBQUMsd0JBQXdCLEdBQUcsVUFBVSxRQUFRLEdBQUcsSUFBSTtBQUM1RCxNQUFJLFFBQVEsSUFBSSxpQkFBaUI7QUFDN0IsVUFBTSxVQUFVLE9BQU8sWUFBWSxRQUFRLEtBQUssS0FBSyxHQUFHLENBQUMsRUFBRTtBQUMzRCxZQUFRLE9BQU8sTUFBTSxHQUFHLE9BQU8sWUFBWSxpQkFBaUIsQ0FBQyxJQUFJLE9BQU87QUFBQSxDQUFJO0FBQUEsRUFDaEY7QUFDQSxRQUFNLE1BQU0sQ0FBQztBQU9iLFNBQU8sUUFBUSxRQUFRLE1BQU0sR0FBRztBQUNwQzsiLAogICJuYW1lcyI6IFtdCn0K
