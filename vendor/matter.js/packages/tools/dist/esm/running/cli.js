/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { dirname, resolve } from "node:path";
import { exit, stdout } from "node:process";
import { ensureCompiled } from "./ensure-compiled.js";
import { executeNode } from "./execute.js";
async function main(argv = process.argv) {
  let directExec = !!process.env.MATTER_DIRECT_EXEC;
  argv = argv.slice(2);
  const nodeArgv = Array();
  while (argv[0][0] === "-") {
    const option = argv.shift();
    switch (option) {
      case "--clear":
        console.clear();
        break;
      case "--direct":
        directExec = true;
        break;
      case "--help":
        stdout.write(
          "Usage: matter-run [--clear] [--direct] [-<NODE_OPT>]... <SCRIPT> [ARG]...\nRun a Node.js script with source map support and automatic transpilation of TypeScript."
        );
        break;
      default:
        nodeArgv.push(option);
        break;
    }
  }
  let script = argv.shift();
  if (script === void 0 || script === "") {
    console.error("Error: Script name required");
    exit(1);
  }
  script = resolve(script);
  let dir;
  if (script.match(/[\\/]node_modules[\\/].bin[\\/]/)) {
    dir = process.cwd();
  } else {
    dir = dirname(script);
  }
  const { format, pkg } = await ensureCompiled(dir);
  if (format !== "none") {
    script = pkg.resolve(
      pkg.relative(script).replace(/\.ts$/, ".js").replace(/^src[\\/]/, `dist/${format}/`)
    );
  }
  if (directExec) {
    await import(script);
  } else {
    process.on("SIGINT", () => {
    });
    process.on("SIGTERM", () => {
    });
    process.exitCode = await executeNode(script, argv, nodeArgv);
  }
}
export {
  main
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL3J1bm5pbmcvY2xpLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMi0yMDI1IE1hdHRlci5qcyBBdXRob3JzXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7IGRpcm5hbWUsIHJlc29sdmUgfSBmcm9tIFwibm9kZTpwYXRoXCI7XG5pbXBvcnQgeyBleGl0LCBzdGRvdXQgfSBmcm9tIFwibm9kZTpwcm9jZXNzXCI7XG5pbXBvcnQgeyBlbnN1cmVDb21waWxlZCB9IGZyb20gXCIuL2Vuc3VyZS1jb21waWxlZC5qc1wiO1xuaW1wb3J0IHsgZXhlY3V0ZU5vZGUgfSBmcm9tIFwiLi9leGVjdXRlLmpzXCI7XG5cbi8qKlxuICogRXhlY3V0ZSBhIHNjcmlwdCBpbiBhIHBhY2thZ2UgdGhhdCBjb25mb3JtcyB0byBtYXR0ZXIuanMgY29udmVudGlvbnMuICBUaGlzIGlzIHByaW1hcmlseSB1c2VmdWwgd2l0aGluIGEgbWF0dGVyLmpzXG4gKiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudCBidXQgc2hvdWxkIGFsc28gd29yayB3aGVuIGluc3RhbGxlZCB2aWEgTlBNLlxuICpcbiAqIEZpcnN0IHdlIHRyYW5zbGF0ZSBzb3VyY2UgZmlsZW5hbWVzIHRvIHRoZSB0cmFuc3BpbGVkICouanMgZXF1aXZhbGVudC5cbiAqXG4gKiBJZiB0aGUgdGFyZ2V0IHNjcmlwdCBpcyBpbiBhIHBhY2thZ2Ugbm90IGluc3RhbGxlZCB2aWEgTlBNIHdlIGJ1aWxkIHRoZSBwYWNrYWdlLiAgSWYgdGhlIHBhY2thZ2UgaXMgYW4gTlBNIHdvcmtzcGFjZVxuICogdW5kZXIgYSB0b3AtbGV2ZWwgcGFja2FnZSB3ZSBhbHNvIGJ1aWxkIGRlcGVuZGVuY2llcy5cbiAqXG4gKiBXZSB0aGVuIHJ1biB0aGUgc2NyaXB0IGluIGEgY2hpbGQgcHJvY2VzcyBzbyB3ZSBjYW4gZW5hYmxlIHNvdXJjZSBtYXBzIHVzaW5nIG5vZGUgLS1zb3VyY2UtbWFwcy4gIFlvdSBjYW4gZGlzYWJsZVxuICogdGhpcyBieSBzZXR0aW5nIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZSBNQVRURVJfRElSRUNUX0VYRUMuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKGFyZ3YgPSBwcm9jZXNzLmFyZ3YpIHtcbiAgICBsZXQgZGlyZWN0RXhlYyA9ICEhcHJvY2Vzcy5lbnYuTUFUVEVSX0RJUkVDVF9FWEVDO1xuXG4gICAgLy8gRHJvcCBub2RlIGFuZCBtYXR0ZXItcnVuXG4gICAgYXJndiA9IGFyZ3Yuc2xpY2UoMik7XG5cbiAgICBjb25zdCBub2RlQXJndiA9IEFycmF5PHN0cmluZz4oKTtcblxuICAgIC8vIFByb2Nlc3MgYXJndW1lbnRzIHRvIG1hdHRlci1ydW4gaXRzZWxmICh2ZXJ5IHNpbXBsZSBhcyBvZiB5ZXQgc28ganVzdCBwcm9jZXNzaW5nIG1hbnVhbGx5KVxuICAgIHdoaWxlIChhcmd2WzBdWzBdID09PSBcIi1cIikge1xuICAgICAgICBjb25zdCBvcHRpb24gPSBhcmd2LnNoaWZ0KCkhO1xuXG4gICAgICAgIHN3aXRjaCAob3B0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIFwiLS1jbGVhclwiOlxuICAgICAgICAgICAgICAgIGNvbnNvbGUuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcIi0tZGlyZWN0XCI6XG4gICAgICAgICAgICAgICAgZGlyZWN0RXhlYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCItLWhlbHBcIjpcbiAgICAgICAgICAgICAgICBzdGRvdXQud3JpdGUoXG4gICAgICAgICAgICAgICAgICAgIFwiVXNhZ2U6IG1hdHRlci1ydW4gWy0tY2xlYXJdIFstLWRpcmVjdF0gWy08Tk9ERV9PUFQ+XS4uLiA8U0NSSVBUPiBbQVJHXS4uLlxcblJ1biBhIE5vZGUuanMgc2NyaXB0IHdpdGggc291cmNlIG1hcCBzdXBwb3J0IGFuZCBhdXRvbWF0aWMgdHJhbnNwaWxhdGlvbiBvZiBUeXBlU2NyaXB0LlwiLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gQW55IG9wdGlvbiB3ZSBkb24ndCByZWNvZ25pemUgd2UgcGFzcyB0byBub2RlXG4gICAgICAgICAgICAgICAgbm9kZUFyZ3YucHVzaChvcHRpb24pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gRXh0cmFjdCBzY3JpcHQgbmFtZS4gIGFyZ3YgaXMgdGhlbiB0aGUgc2NyaXB0J3MgYXJnc1xuICAgIGxldCBzY3JpcHQgPSBhcmd2LnNoaWZ0KCk7XG5cbiAgICBpZiAoc2NyaXB0ID09PSB1bmRlZmluZWQgfHwgc2NyaXB0ID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvcjogU2NyaXB0IG5hbWUgcmVxdWlyZWRcIik7XG4gICAgICAgIGV4aXQoMSk7XG4gICAgfVxuXG4gICAgc2NyaXB0ID0gcmVzb2x2ZShzY3JpcHQpO1xuICAgIGxldCBkaXI7XG5cbiAgICBpZiAoc2NyaXB0Lm1hdGNoKC9bXFxcXC9dbm9kZV9tb2R1bGVzW1xcXFwvXS5iaW5bXFxcXC9dLykpIHtcbiAgICAgICAgLy8gV2hlbiBleGVjdXRpbmcgYSBzY3JpcHQgbGlua2VkIHVuZGVyIG5vZGVfbW9kdWxlcywgc2VhcmNoIGZvciB0aGUgcHJvamVjdCBmcm9tIGN3ZC4gIFRoaXMgb2NjdXJzIHdoZW4gcnVubmluZ1xuICAgICAgICAvLyB0b29saW5nIHN1Y2ggYXMgXCJtYXR0ZXItdGVzdFwiXG4gICAgICAgIGRpciA9IHByb2Nlc3MuY3dkKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gV2hlbiBleGVjdXRpbmcgb3V0c2lkZSBvZiBub2RlIG1vZHVsZXMgd2Ugd2FudCB0byBidWlsZCB0aGUgcHJvamVjdCBjb250YWluaW5nIHRoZSBzY3JpcHRcbiAgICAgICAgZGlyID0gZGlybmFtZShzY3JpcHQpO1xuICAgIH1cblxuICAgIGNvbnN0IHsgZm9ybWF0LCBwa2cgfSA9IGF3YWl0IGVuc3VyZUNvbXBpbGVkKGRpcik7XG5cbiAgICAvLyBEZXRlcm1pbmUgdGhlIGFjdHVhbCBzY3JpcHQgdG8gcnVuXG4gICAgaWYgKGZvcm1hdCAhPT0gXCJub25lXCIpIHtcbiAgICAgICAgc2NyaXB0ID0gcGtnLnJlc29sdmUoXG4gICAgICAgICAgICBwa2dcbiAgICAgICAgICAgICAgICAucmVsYXRpdmUoc2NyaXB0KVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXC50cyQvLCBcIi5qc1wiKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9ec3JjW1xcXFwvXS8sIGBkaXN0LyR7Zm9ybWF0fS9gKSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBydW4gaW4gdGhlIHNhbWUgcHJvY2VzcyB3ZSBjYW5ub3QgZW5hYmxlIHNvdXJjZSBtYXBzIHNvIGRlZmF1bHQgbW9kZSBpcyB0byBmb3JrLiAgSG93ZXZlciBmb3IgZGV2ZWxvcG1lbnRcbiAgICAvLyBwdXJwb3NlcyBpdCBjYW4gYmUgdXNlZnVsIHRvIGF2b2lkIHRoZSBpbnRlcm1lZGlhcnkgcHJvY2Vzcy4gIEluIHRoaXMgY2FzZSB5b3UgY2FuIHNldCBcIi0tZW5hYmxlLXNvdXJjZS1tYXBzXCJcbiAgICAvLyBtYW51YWxseSB0aGVuIHNldCBNQVRURVJfRElSRUNUX0VYRUNcbiAgICBpZiAoZGlyZWN0RXhlYykge1xuICAgICAgICAvLyBUaGlzIHdpbGwgbm90IHRyYW5zcGlsZSBwcm9wZXJseSB0byBjb21tb25qcyBidXQgd2Ugb25seSB1c2UgdGhpcyBtb2R1bGUgZnJvbSBFU00gc28gdGhhdCdzIE9LXG4gICAgICAgIGF3YWl0IGltcG9ydChzY3JpcHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE91ciBiZWhhdmlvciBpbiByZXNwb25zZSB0byBTSUdJTlQgc2hvdWxkIG1pcnJvciB0aGUgY2hpbGQgcHJvY2VzcydzLiAgU28gaWdub3JlIHRoZSBzaWduYWwgbG9jYWxseSwgb25seVxuICAgICAgICAvLyBxdWl0dGluZyBvbmNlIHRoZSBjaGlsZCBwcm9jZXNzIGRvZXNcbiAgICAgICAgcHJvY2Vzcy5vbihcIlNJR0lOVFwiLCAoKSA9PiB7fSk7XG4gICAgICAgIHByb2Nlc3Mub24oXCJTSUdURVJNXCIsICgpID0+IHt9KTtcblxuICAgICAgICBwcm9jZXNzLmV4aXRDb2RlID0gYXdhaXQgZXhlY3V0ZU5vZGUoc2NyaXB0LCBhcmd2LCBub2RlQXJndik7XG4gICAgfVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQU1BLFNBQVMsU0FBUyxlQUFlO0FBQ2pDLFNBQVMsTUFBTSxjQUFjO0FBQzdCLFNBQVMsc0JBQXNCO0FBQy9CLFNBQVMsbUJBQW1CO0FBYzVCLGVBQXNCLEtBQUssT0FBTyxRQUFRLE1BQU07QUFDNUMsTUFBSSxhQUFhLENBQUMsQ0FBQyxRQUFRLElBQUk7QUFHL0IsU0FBTyxLQUFLLE1BQU0sQ0FBQztBQUVuQixRQUFNLFdBQVcsTUFBYztBQUcvQixTQUFPLEtBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxLQUFLO0FBQ3ZCLFVBQU0sU0FBUyxLQUFLLE1BQU07QUFFMUIsWUFBUSxRQUFRO0FBQUEsTUFDWixLQUFLO0FBQ0QsZ0JBQVEsTUFBTTtBQUNkO0FBQUEsTUFFSixLQUFLO0FBQ0QscUJBQWE7QUFDYjtBQUFBLE1BRUosS0FBSztBQUNELGVBQU87QUFBQSxVQUNIO0FBQUEsUUFDSjtBQUNBO0FBQUEsTUFFSjtBQUVJLGlCQUFTLEtBQUssTUFBTTtBQUNwQjtBQUFBLElBQ1I7QUFBQSxFQUNKO0FBR0EsTUFBSSxTQUFTLEtBQUssTUFBTTtBQUV4QixNQUFJLFdBQVcsVUFBYSxXQUFXLElBQUk7QUFDdkMsWUFBUSxNQUFNLDZCQUE2QjtBQUMzQyxTQUFLLENBQUM7QUFBQSxFQUNWO0FBRUEsV0FBUyxRQUFRLE1BQU07QUFDdkIsTUFBSTtBQUVKLE1BQUksT0FBTyxNQUFNLGlDQUFpQyxHQUFHO0FBR2pELFVBQU0sUUFBUSxJQUFJO0FBQUEsRUFDdEIsT0FBTztBQUVILFVBQU0sUUFBUSxNQUFNO0FBQUEsRUFDeEI7QUFFQSxRQUFNLEVBQUUsUUFBUSxJQUFJLElBQUksTUFBTSxlQUFlLEdBQUc7QUFHaEQsTUFBSSxXQUFXLFFBQVE7QUFDbkIsYUFBUyxJQUFJO0FBQUEsTUFDVCxJQUNLLFNBQVMsTUFBTSxFQUNmLFFBQVEsU0FBUyxLQUFLLEVBQ3RCLFFBQVEsYUFBYSxRQUFRLE1BQU0sR0FBRztBQUFBLElBQy9DO0FBQUEsRUFDSjtBQUtBLE1BQUksWUFBWTtBQUVaLFVBQU0sT0FBTztBQUFBLEVBQ2pCLE9BQU87QUFHSCxZQUFRLEdBQUcsVUFBVSxNQUFNO0FBQUEsSUFBQyxDQUFDO0FBQzdCLFlBQVEsR0FBRyxXQUFXLE1BQU07QUFBQSxJQUFDLENBQUM7QUFFOUIsWUFBUSxXQUFXLE1BQU0sWUFBWSxRQUFRLE1BQU0sUUFBUTtBQUFBLEVBQy9EO0FBQ0o7IiwKICAibmFtZXMiOiBbXQp9Cg==
