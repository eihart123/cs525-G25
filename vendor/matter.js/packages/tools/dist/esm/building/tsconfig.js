/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { relative, resolve } from "node:path";
async function syncAllTsconfigs(graph) {
  const workspace = graph.nodes[0].pkg.workspace;
  const rootTsconfig = await workspace.readJson("tsconfig.json");
  const originalReferences = rootTsconfig.references;
  rootTsconfig.references = [];
  for (const node of graph.nodes) {
    await syncPackageTsconfigs(graph, node);
    rootTsconfig.references.push({ path: workspace.relative(node.pkg.path).replace(/\\/g, "/") });
  }
  if (referencesChanged(originalReferences, rootTsconfig.references)) {
    await workspace.writeJson("tsconfig.json", rootTsconfig);
  }
}
function referencesChanged(originalReferences, newReferences) {
  return JSON.stringify(originalReferences) !== JSON.stringify(newReferences);
}
async function syncPackageTsconfigs(graph, node) {
  await syncSubproject(node, "src");
  await syncSubproject(node, "test", node.pkg.resolve("src"), graph.get("@matter/tools").pkg.resolve("src"));
}
async function syncSubproject(node, path, ...extraRefs) {
  path = node.pkg.resolve(path);
  const tsconfigPath = resolve(path, "tsconfig.json");
  if (!node.pkg.hasFile(tsconfigPath)) {
    return;
  }
  const tsconfig = await node.pkg.readJson(tsconfigPath);
  const deps = node.dependencies.filter((dep) => dep.pkg.isLibrary).map((dep) => dep.pkg.resolve("src"));
  const desired = [.../* @__PURE__ */ new Set([...deps, ...extraRefs])];
  const newReferences = desired.map((ref) => ({ path: relative(path, ref).replace(/\\/g, "/") })).sort((ref1, ref2) => ref1.path.localeCompare(ref2.path));
  if (referencesChanged(tsconfig.references, newReferences)) {
    tsconfig.references = newReferences;
    await node.pkg.writeJson(tsconfigPath, tsconfig);
  }
}
export {
  syncAllTsconfigs,
  syncPackageTsconfigs
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2J1aWxkaW5nL3RzY29uZmlnLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMi0yMDI1IE1hdHRlci5qcyBBdXRob3JzXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7IHJlbGF0aXZlLCByZXNvbHZlIH0gZnJvbSBcIm5vZGU6cGF0aFwiO1xuaW1wb3J0IHsgR3JhcGggfSBmcm9tIFwiLi9ncmFwaC5qc1wiO1xuXG4vKipcbiAqIFVuZm9ydHVuYXRlbHkgdHlwZXNjcmlwdCdzIFwicHJvamVjdCByZWZlcmVuY2VzXCIgYXJlIHJlZHVuZGFudCB3aXRoIHBhY2thZ2UuanNvbiBkZXBlbmRlbmNpZXMuICBXZSBkb24ndCB1c2UgdGhlbSBmb3JcbiAqIGJ1aWxkIGJ1dCB0aGVyZSBhcmUgc3RpbGwgc29tZSBhZHZhbnRhZ2VzIHRvIG1haW50YWluaW5nIHRoZW0gc28gd2UganVzdCBlbnN1cmUgdGhleSdyZSBpbiBzeW5jIGR1cmluZyB3b3Jrc3BhY2VcbiAqIGJ1aWxkcy5cbiAqXG4gKiBPbmUgZGlzY3Vzc2lvbiBvbiB0aGUgdG9waWM6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMjUzNzZcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN5bmNBbGxUc2NvbmZpZ3MoZ3JhcGg6IEdyYXBoKSB7XG4gICAgY29uc3Qgd29ya3NwYWNlID0gZ3JhcGgubm9kZXNbMF0ucGtnLndvcmtzcGFjZTtcbiAgICBjb25zdCByb290VHNjb25maWcgPSBhd2FpdCB3b3Jrc3BhY2UucmVhZEpzb24oXCJ0c2NvbmZpZy5qc29uXCIpO1xuXG4gICAgY29uc3Qgb3JpZ2luYWxSZWZlcmVuY2VzID0gcm9vdFRzY29uZmlnLnJlZmVyZW5jZXM7XG4gICAgcm9vdFRzY29uZmlnLnJlZmVyZW5jZXMgPSBbXTtcblxuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBncmFwaC5ub2Rlcykge1xuICAgICAgICBhd2FpdCBzeW5jUGFja2FnZVRzY29uZmlncyhncmFwaCwgbm9kZSk7XG4gICAgICAgIHJvb3RUc2NvbmZpZy5yZWZlcmVuY2VzLnB1c2goeyBwYXRoOiB3b3Jrc3BhY2UucmVsYXRpdmUobm9kZS5wa2cucGF0aCkucmVwbGFjZSgvXFxcXC9nLCBcIi9cIikgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlZmVyZW5jZXNDaGFuZ2VkKG9yaWdpbmFsUmVmZXJlbmNlcywgcm9vdFRzY29uZmlnLnJlZmVyZW5jZXMpKSB7XG4gICAgICAgIGF3YWl0IHdvcmtzcGFjZS53cml0ZUpzb24oXCJ0c2NvbmZpZy5qc29uXCIsIHJvb3RUc2NvbmZpZyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiByZWZlcmVuY2VzQ2hhbmdlZChvcmlnaW5hbFJlZmVyZW5jZXM6IHVua25vd24sIG5ld1JlZmVyZW5jZXM6IHVua25vd24pIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob3JpZ2luYWxSZWZlcmVuY2VzKSAhPT0gSlNPTi5zdHJpbmdpZnkobmV3UmVmZXJlbmNlcyk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzeW5jUGFja2FnZVRzY29uZmlncyhncmFwaDogR3JhcGgsIG5vZGU6IEdyYXBoLk5vZGUpIHtcbiAgICBhd2FpdCBzeW5jU3VicHJvamVjdChub2RlLCBcInNyY1wiKTtcbiAgICBhd2FpdCBzeW5jU3VicHJvamVjdChub2RlLCBcInRlc3RcIiwgbm9kZS5wa2cucmVzb2x2ZShcInNyY1wiKSwgZ3JhcGguZ2V0KFwiQG1hdHRlci90b29sc1wiKS5wa2cucmVzb2x2ZShcInNyY1wiKSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHN5bmNTdWJwcm9qZWN0KG5vZGU6IEdyYXBoLk5vZGUsIHBhdGg6IHN0cmluZywgLi4uZXh0cmFSZWZzOiBzdHJpbmdbXSkge1xuICAgIHBhdGggPSBub2RlLnBrZy5yZXNvbHZlKHBhdGgpO1xuXG4gICAgY29uc3QgdHNjb25maWdQYXRoID0gcmVzb2x2ZShwYXRoLCBcInRzY29uZmlnLmpzb25cIik7XG4gICAgaWYgKCFub2RlLnBrZy5oYXNGaWxlKHRzY29uZmlnUGF0aCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHRzY29uZmlnID0gYXdhaXQgbm9kZS5wa2cucmVhZEpzb24odHNjb25maWdQYXRoKTtcblxuICAgIGNvbnN0IGRlcHMgPSBub2RlLmRlcGVuZGVuY2llcy5maWx0ZXIoZGVwID0+IGRlcC5wa2cuaXNMaWJyYXJ5KS5tYXAoZGVwID0+IGRlcC5wa2cucmVzb2x2ZShcInNyY1wiKSk7XG4gICAgLy8uZmlsdGVyKHAgPT4gIXAubWF0Y2goL3BhY2thZ2VzW1xcXFwvXXRvb2xzLykpO1xuXG4gICAgY29uc3QgZGVzaXJlZCA9IFsuLi5uZXcgU2V0KFsuLi5kZXBzLCAuLi5leHRyYVJlZnNdKV07XG5cbiAgICBjb25zdCBuZXdSZWZlcmVuY2VzID0gZGVzaXJlZFxuICAgICAgICAubWFwKHJlZiA9PiAoeyBwYXRoOiByZWxhdGl2ZShwYXRoLCByZWYpLnJlcGxhY2UoL1xcXFwvZywgXCIvXCIpIH0pKVxuICAgICAgICAuc29ydCgocmVmMSwgcmVmMikgPT4gcmVmMS5wYXRoLmxvY2FsZUNvbXBhcmUocmVmMi5wYXRoKSk7XG5cbiAgICBpZiAocmVmZXJlbmNlc0NoYW5nZWQodHNjb25maWcucmVmZXJlbmNlcywgbmV3UmVmZXJlbmNlcykpIHtcbiAgICAgICAgdHNjb25maWcucmVmZXJlbmNlcyA9IG5ld1JlZmVyZW5jZXM7XG4gICAgICAgIGF3YWl0IG5vZGUucGtnLndyaXRlSnNvbih0c2NvbmZpZ1BhdGgsIHRzY29uZmlnKTtcbiAgICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBTUEsU0FBUyxVQUFVLGVBQWU7QUFVbEMsZUFBc0IsaUJBQWlCLE9BQWM7QUFDakQsUUFBTSxZQUFZLE1BQU0sTUFBTSxDQUFDLEVBQUUsSUFBSTtBQUNyQyxRQUFNLGVBQWUsTUFBTSxVQUFVLFNBQVMsZUFBZTtBQUU3RCxRQUFNLHFCQUFxQixhQUFhO0FBQ3hDLGVBQWEsYUFBYSxDQUFDO0FBRTNCLGFBQVcsUUFBUSxNQUFNLE9BQU87QUFDNUIsVUFBTSxxQkFBcUIsT0FBTyxJQUFJO0FBQ3RDLGlCQUFhLFdBQVcsS0FBSyxFQUFFLE1BQU0sVUFBVSxTQUFTLEtBQUssSUFBSSxJQUFJLEVBQUUsUUFBUSxPQUFPLEdBQUcsRUFBRSxDQUFDO0FBQUEsRUFDaEc7QUFFQSxNQUFJLGtCQUFrQixvQkFBb0IsYUFBYSxVQUFVLEdBQUc7QUFDaEUsVUFBTSxVQUFVLFVBQVUsaUJBQWlCLFlBQVk7QUFBQSxFQUMzRDtBQUNKO0FBRUEsU0FBUyxrQkFBa0Isb0JBQTZCLGVBQXdCO0FBQzVFLFNBQU8sS0FBSyxVQUFVLGtCQUFrQixNQUFNLEtBQUssVUFBVSxhQUFhO0FBQzlFO0FBRUEsZUFBc0IscUJBQXFCLE9BQWMsTUFBa0I7QUFDdkUsUUFBTSxlQUFlLE1BQU0sS0FBSztBQUNoQyxRQUFNLGVBQWUsTUFBTSxRQUFRLEtBQUssSUFBSSxRQUFRLEtBQUssR0FBRyxNQUFNLElBQUksZUFBZSxFQUFFLElBQUksUUFBUSxLQUFLLENBQUM7QUFDN0c7QUFFQSxlQUFlLGVBQWUsTUFBa0IsU0FBaUIsV0FBcUI7QUFDbEYsU0FBTyxLQUFLLElBQUksUUFBUSxJQUFJO0FBRTVCLFFBQU0sZUFBZSxRQUFRLE1BQU0sZUFBZTtBQUNsRCxNQUFJLENBQUMsS0FBSyxJQUFJLFFBQVEsWUFBWSxHQUFHO0FBQ2pDO0FBQUEsRUFDSjtBQUVBLFFBQU0sV0FBVyxNQUFNLEtBQUssSUFBSSxTQUFTLFlBQVk7QUFFckQsUUFBTSxPQUFPLEtBQUssYUFBYSxPQUFPLFNBQU8sSUFBSSxJQUFJLFNBQVMsRUFBRSxJQUFJLFNBQU8sSUFBSSxJQUFJLFFBQVEsS0FBSyxDQUFDO0FBR2pHLFFBQU0sVUFBVSxDQUFDLEdBQUcsb0JBQUksSUFBSSxDQUFDLEdBQUcsTUFBTSxHQUFHLFNBQVMsQ0FBQyxDQUFDO0FBRXBELFFBQU0sZ0JBQWdCLFFBQ2pCLElBQUksVUFBUSxFQUFFLE1BQU0sU0FBUyxNQUFNLEdBQUcsRUFBRSxRQUFRLE9BQU8sR0FBRyxFQUFFLEVBQUUsRUFDOUQsS0FBSyxDQUFDLE1BQU0sU0FBUyxLQUFLLEtBQUssY0FBYyxLQUFLLElBQUksQ0FBQztBQUU1RCxNQUFJLGtCQUFrQixTQUFTLFlBQVksYUFBYSxHQUFHO0FBQ3ZELGFBQVMsYUFBYTtBQUN0QixVQUFNLEtBQUssSUFBSSxVQUFVLGNBQWMsUUFBUTtBQUFBLEVBQ25EO0FBQ0o7IiwKICAibmFtZXMiOiBbXQp9Cg==
