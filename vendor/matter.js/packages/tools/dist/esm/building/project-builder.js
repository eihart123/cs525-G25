/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { createHash } from "node:crypto";
import { BuildError } from "./error.js";
import { Graph } from "./graph.js";
import { createTypescriptContext } from "./typescript.js";
var Target = /* @__PURE__ */ ((Target2) => {
  Target2["clean"] = "clean";
  Target2["types"] = "types";
  Target2["esm"] = "esm";
  Target2["cjs"] = "cjs";
  return Target2;
})(Target || {});
class ProjectBuilder {
  constructor(options = {}) {
    this.options = options;
    this.graph = options.graph;
    this.unconditional = options.clean || options.targets !== void 0 && options.targets?.indexOf("clean" /* clean */) !== -1;
  }
  unconditional;
  tsContext;
  graph;
  get hasClean() {
    return this.options.clean;
  }
  clearClean() {
    delete this.options.clean;
  }
  hasTargets() {
    return this.options.targets && this.options.targets.length > 0;
  }
  async configure(project) {
    if (!project.pkg.hasConfig) {
      return;
    }
    await project.configure();
  }
  async build(project) {
    const progress = project.pkg.start("Building");
    try {
      await this.#doBuild(project, progress);
    } catch (e) {
      progress.close();
      process.stderr.write(`${e.stack ?? e.message}

`);
      process.exit(1);
    }
    progress.close();
  }
  async #doBuild(project, progress) {
    const targets = this.#selectTargets(project);
    if (targets.has("clean" /* clean */) || this.options.clean) {
      await progress.run("Clean", () => project.clean());
    }
    if (!targets.has("types" /* types */) && !targets.has("esm" /* esm */) && !targets.has("cjs" /* cjs */)) {
      return;
    }
    const info = {};
    const config = await project.configure();
    await config?.before?.({ project });
    const graph = this.graph ?? await Graph.forProject(project.pkg.path);
    let node;
    if (graph) {
      node = graph.get(project.pkg.name);
      for (const dep of node.dependencies) {
        if (dep.info.apiSha !== void 0) {
          if (info.dependencyApiShas === void 0) {
            info.dependencyApiShas = {};
          }
          info.dependencyApiShas[dep.pkg.name] = dep.info.apiSha;
        }
      }
    }
    if (targets.has("types" /* types */)) {
      try {
        let context = this.tsContext;
        if (context === void 0) {
          context = this.tsContext = await createTypescriptContext(project.pkg.workspace, graph);
        }
        const refreshCallback = progress.refresh.bind(progress);
        if (project.pkg.isLibrary) {
          const apiSha = createHash("sha1");
          if (node) {
            for (const dep of node.dependencies) {
              if (dep.info.apiSha !== void 0) {
                apiSha.update(dep.info.apiSha);
              }
            }
          }
          await progress.run(`Generate ${progress.emphasize("type declarations")}`, async () => {
            await context.build(project.pkg, "src", refreshCallback);
            await project.hashDeclarations(apiSha);
          });
          info.apiSha = apiSha.digest("hex");
        } else {
          await progress.run(
            `Validate ${progress.emphasize("types")}`,
            () => context.build(project.pkg, "src", refreshCallback, false)
          );
        }
        if (project.pkg.hasTests) {
          await progress.run(
            `Validate ${progress.emphasize("test types")}`,
            () => context.build(project.pkg, "test", refreshCallback)
          );
        }
      } catch (e) {
        if (e instanceof BuildError) {
          progress.failure("Terminating due to type errors");
          process.stderr.write(`${e.diagnostics}
`);
          process.exit(1);
        }
        throw e;
      }
    }
    const formats = Array();
    if (targets.has("esm" /* esm */)) {
      formats.push("esm");
    }
    if (targets.has("cjs" /* cjs */)) {
      formats.push("cjs");
    }
    if (formats.length) {
      const groups = [project.pkg.isLibrary ? "library" : "app"];
      if (project.pkg.hasTests) {
        groups.push("tests");
      }
      const formatDesc = formats.map(progress.emphasize).join("+");
      const groupDesc = groups.map(progress.emphasize).join("+");
      await progress.run(`Transpile ${groupDesc} to ${formatDesc}`, async () => {
        for (const format of formats) {
          await this.#transpile(project, format);
        }
      });
    }
    await config?.after?.({ project });
    if (!this.options.targets?.length) {
      await project.recordBuildInfo(info);
      if (node) {
        node.info = info;
      }
    }
  }
  async #transpile(project, format) {
    await project.buildSource(format);
    if (project.pkg.hasTests) {
      await project.buildTests(format);
    }
  }
  #selectTargets(project) {
    const targets = new Set(this.options.targets);
    if (!targets.size) {
      targets.add("types" /* types */);
      if (project.pkg.supportsEsm) {
        targets.add("esm" /* esm */);
      }
      if (project.pkg.supportsCjs) {
        targets.add("cjs" /* cjs */);
      }
    } else {
      if (!project.pkg.supportsEsm) {
        targets.delete("esm" /* esm */);
      }
      if (!project.pkg.supportsCjs) {
        targets.delete("cjs" /* cjs */);
      }
    }
    return targets;
  }
}
export {
  ProjectBuilder,
  Target
};
//# sourceMappingURL=data:application/json;base64,
