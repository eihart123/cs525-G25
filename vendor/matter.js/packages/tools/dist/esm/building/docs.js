/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { relative } from "node:path";
import {
  Application,
  ContainerReflection,
  Converter,
  DeclarationReflection,
  LogLevel,
  ReflectionFlag,
  ReflectionKind
} from "typedoc";
import { isFile } from "../util/file.js";
import { Graph } from "./graph.js";
const PLUGINS = ["typedoc-github-theme"];
const OUTPUT_PATH = "build/docs/docs";
const THEME_OPTIONS = {
  themeColor: "#cb9820"
  // TODO - add service links
  //   GitHub: "https://github.com/project-chip/matter.js",
  //   Discord: "https://discord.gg/ujmRNrhDuW",
  //   NPM: "https://www.npmjs.com/package/@project-chip/matter.js",
};
async function buildDocs(pkg, progress) {
  const modules = pkg.sourceModules;
  const entryPoints = Array();
  const basePath = pkg.root.path;
  for (const name in modules) {
    const path = modules[name];
    if (path.endsWith(".json")) {
      continue;
    }
    if (isFile(path)) {
      if (!entryPoints.includes(path)) {
        entryPoints.push(path);
      }
    } else {
      throw new Error(`No source found for module ${name} path ${modules[name]}`);
    }
  }
  const app = await createApplication({
    excludeExternals: true,
    entryPoints,
    tsconfig: pkg.resolve("tsconfig.json"),
    basePath,
    skipErrorChecking: true,
    // Removes a couple hundred MB of tabs so worth uncommenting at some point
    //pretty: false,
    readme: "none"
  });
  instrumentForEntrypointRepair(app, pkg);
  const analysis = new ReflectionAnalysis();
  app.converter.on(Converter.EVENT_CREATE_DECLARATION, () => {
    progress.refresh();
  });
  app.converter.on(Converter.EVENT_RESOLVE, () => {
    progress.refresh();
  });
  const reflection = await loadReflections(app, pkg);
  analyzeReflections(reflection, analysis);
  repairReflections(analysis);
  await app.generateJson(reflection, pkg.resolve("build/docs.json"));
}
function reflectionsPath(pkg) {
  const path = pkg.resolve("build/docs.json");
  if (isFile(path)) {
    return path;
  }
}
function instrumentForEntrypointRepair(app, pkg) {
  const baseGetEntryPoints = app.getEntryPoints.bind(app);
  const mapping = naiveToRealNamesFor(pkg);
  app.getEntryPoints = () => {
    const list = baseGetEntryPoints();
    if (list === void 0) {
      return list;
    }
    for (const ep of list) {
      const realName = mapping[ep.displayName];
      if (realName === void 0) {
        throw new Error(`Typedoc naive module name "${ep.displayName}" is unmapped`);
      }
      ep.displayName = realName;
    }
    return list;
  };
}
function naiveToRealNamesFor(pkg) {
  const modules = pkg.sourceModules;
  const mapping = {};
  const packagePrefix = `${pkg.name}/`;
  const basePath = pkg.root.path;
  for (const name in modules) {
    const path = modules[name];
    if (path.endsWith(".json")) {
      continue;
    }
    const naiveName = relative(basePath, path).replace(/.(?:ts|js|mjs|cjs)$/, "").replace(/\/index$/, "");
    if (name.startsWith(packagePrefix)) {
      mapping[naiveName] = name.substring(packagePrefix.length);
    } else if (name === pkg.name) {
      mapping[naiveName] = ".";
    } else {
      mapping[naiveName] = name;
    }
  }
  return mapping;
}
async function mergeDocs(pkg) {
  const entryPoints = Array();
  const root = pkg.root;
  if (root.isWorkspace) {
    const graph = await Graph.load(root);
    if (graph === void 0) {
      throw new Error(`Internal: ${pkg.name} has workspaces but no graph`);
    }
    for (const node of graph.nodes) {
      const path = reflectionsPath(node.pkg);
      if (path) {
        entryPoints.push(path);
      }
    }
    if (!entryPoints.length) {
      throw new Error(`No reflections detected in workspace ${pkg.name}`);
    }
  } else {
    const path = reflectionsPath(pkg);
    if (path === void 0) {
      throw new Error(`No reflections present for ${pkg.name}`);
    }
    entryPoints.push(path);
  }
  const app = await createApplication({
    entryPoints,
    entryPointStrategy: "merge",
    ...THEME_OPTIONS
  });
  const reflection = await loadReflections(app, pkg);
  await app.generateDocs(reflection, pkg.resolve(OUTPUT_PATH));
}
async function createApplication(options) {
  return await Application.bootstrapWithPlugins({
    plugin: PLUGINS,
    logLevel: LogLevel.Warn,
    ...options
  });
}
async function loadReflections(app, pkg) {
  const reflection = await app.convert();
  if (reflection === void 0) {
    throw new Error(`Project ${pkg.path} produced no documentation`);
  }
  return reflection;
}
class ReflectionAnalysis {
  // TODO - need to populate this during analysis so we can warn; will replace typedoc-plugin-missing-exports
  unexportedReference = /* @__PURE__ */ new Set();
  mergeWithParent = /* @__PURE__ */ new Set();
  mergeInto = /* @__PURE__ */ new Map();
}
function analyzeReflections(node, analysis) {
  visit(node, (subject) => {
    const children = childrenOf(subject);
    const mergeable = {};
    const namespaces = /* @__PURE__ */ new Set();
    for (const child of children) {
      if (child.kindOf(ReflectionKind.ClassOrInterface | ReflectionKind.Function)) {
        mergeable[child.name] = child;
      } else if (child.kindOf(ReflectionKind.Namespace)) {
        namespaces.add(child);
      }
    }
    for (const ns of namespaces) {
      const mergeInto2 = mergeable[ns.name];
      if (mergeInto2) {
        analysis.mergeInto.set(ns, mergeInto2);
      }
    }
  });
}
function repairReflections(analysis) {
  for (const toMerge of analysis.mergeWithParent) {
    if (toMerge.parent instanceof DeclarationReflection) {
      mergeInto(toMerge, toMerge.parent);
    }
  }
  for (const [toMerge, into] of analysis.mergeInto.entries()) {
    mergeInto(toMerge, into);
  }
}
function moveNode(subject, into) {
  const from = subject.parent;
  if (from === into) {
    return;
  }
  if (from) {
    from.removeChild(subject);
  }
  into.addChild(subject);
  subject.parent = into;
  if (from.kindOf(ReflectionKind.Namespace) && into.kindOf(ReflectionKind.ClassOrInterface) && subject.kindOf(ReflectionKind.SomeValue)) {
    subject.flags.setFlag(ReflectionFlag.Static, true);
    if (subject.kindOf(ReflectionKind.Variable)) {
      subject.kind = ReflectionKind.Property;
    }
  }
}
function mergeInto(from, into) {
  const children = childrenOf(from);
  while (children.length) {
    moveNode(children[0], into);
  }
  from.parent?.removeChild(from);
}
function childrenOf(node) {
  if (node instanceof ContainerReflection) {
    if (node.children === void 0) {
      node.children = [];
    }
    return node.children;
  }
  return [];
}
function visit(node, visitor) {
  visitor(node);
  for (const child of childrenOf(node)) {
    visit(child, visitor);
  }
}
export {
  buildDocs,
  mergeDocs
};
//# sourceMappingURL=data:application/json;base64,
