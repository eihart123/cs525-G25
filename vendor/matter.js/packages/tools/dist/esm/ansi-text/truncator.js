/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { ContiguousOutputSegment } from "./contiguous-output-segment.js";
class Truncator {
  #target;
  #addNewline;
  constructor(target, options = {}) {
    const { addNewline } = options;
    this.#target = target;
    this.#addNewline = addNewline === void 0 ? true : false;
  }
  get state() {
    return this.#target.state;
  }
  write(...text) {
    const width = this.#target.state.remainingWidth;
    if (width === void 0) {
      this.#write(...text);
      return;
    }
    const segment = new ContiguousOutputSegment(...text);
    if (segment.width <= width) {
      this.#write(...segment.tokens);
    } else {
      const scanner = segment.scan();
      this.#write(...scanner.take(width - 1), { kind: "nonbreaking", str: "\u2026", width: 1 });
      for (const token of scanner) {
        if (token.kind === "breaking" || token.kind === "nonbreaking") {
          continue;
        }
        this.#write(token);
      }
    }
  }
  close() {
    this.#target.close();
  }
  #write(...text) {
    if (this.#addNewline) {
      this.#target.write(...text, { kind: "newline" });
    } else {
      this.#target.write(...text);
    }
  }
}
export {
  Truncator
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2Fuc2ktdGV4dC90cnVuY2F0b3IudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyLTIwMjUgTWF0dGVyLmpzIEF1dGhvcnNcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHsgQ29uc3VtZXIgfSBmcm9tIFwiLi9jb25zdW1lci5qc1wiO1xuaW1wb3J0IHsgQ29udGlndW91c091dHB1dFNlZ21lbnQgfSBmcm9tIFwiLi9jb250aWd1b3VzLW91dHB1dC1zZWdtZW50LmpzXCI7XG5pbXBvcnQgeyBQcm9kdWNlciB9IGZyb20gXCIuL3Byb2R1Y2VyLmpzXCI7XG5cbi8qKlxuICogV3JpdGVzIGxpbmVzIHRydW5jYXRlZCB0byBhIHNwZWNpZmljIHdpZHRoLlxuICovXG5leHBvcnQgY2xhc3MgVHJ1bmNhdG9yIGltcGxlbWVudHMgQ29uc3VtZXIge1xuICAgICN0YXJnZXQ6IENvbnN1bWVyO1xuICAgICNhZGROZXdsaW5lOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IodGFyZ2V0OiBDb25zdW1lciwgb3B0aW9uczogeyBhZGROZXdsaW5lPzogYm9vbGVhbiB9ID0ge30pIHtcbiAgICAgICAgY29uc3QgeyBhZGROZXdsaW5lIH0gPSBvcHRpb25zO1xuICAgICAgICB0aGlzLiN0YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIHRoaXMuI2FkZE5ld2xpbmUgPSBhZGROZXdsaW5lID09PSB1bmRlZmluZWQgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuXG4gICAgZ2V0IHN0YXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jdGFyZ2V0LnN0YXRlO1xuICAgIH1cblxuICAgIHdyaXRlKC4uLnRleHQ6IFByb2R1Y2VyLlNlcXVlbmNlKSB7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy4jdGFyZ2V0LnN0YXRlLnJlbWFpbmluZ1dpZHRoO1xuXG4gICAgICAgIGlmICh3aWR0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLiN3cml0ZSguLi50ZXh0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNlZ21lbnQgPSBuZXcgQ29udGlndW91c091dHB1dFNlZ21lbnQoLi4udGV4dCk7XG4gICAgICAgIGlmIChzZWdtZW50LndpZHRoIDw9IHdpZHRoKSB7XG4gICAgICAgICAgICB0aGlzLiN3cml0ZSguLi5zZWdtZW50LnRva2Vucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBzY2FubmVyID0gc2VnbWVudC5zY2FuKCk7XG5cbiAgICAgICAgICAgIHRoaXMuI3dyaXRlKC4uLnNjYW5uZXIudGFrZSh3aWR0aCAtIDEpLCB7IGtpbmQ6IFwibm9uYnJlYWtpbmdcIiwgc3RyOiBcIlx1MjAyNlwiLCB3aWR0aDogMSB9KTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdG9rZW4gb2Ygc2Nhbm5lcikge1xuICAgICAgICAgICAgICAgIGlmICh0b2tlbi5raW5kID09PSBcImJyZWFraW5nXCIgfHwgdG9rZW4ua2luZCA9PT0gXCJub25icmVha2luZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLiN3cml0ZSh0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy4jdGFyZ2V0LmNsb3NlKCk7XG4gICAgfVxuXG4gICAgI3dyaXRlKC4uLnRleHQ6IFByb2R1Y2VyLlNlcXVlbmNlKSB7XG4gICAgICAgIGlmICh0aGlzLiNhZGROZXdsaW5lKSB7XG4gICAgICAgICAgICB0aGlzLiN0YXJnZXQud3JpdGUoLi4udGV4dCwgeyBraW5kOiBcIm5ld2xpbmVcIiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuI3RhcmdldC53cml0ZSguLi50ZXh0KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFPQSxTQUFTLCtCQUErQjtBQU1qQyxNQUFNLFVBQThCO0FBQUEsRUFDdkM7QUFBQSxFQUNBO0FBQUEsRUFFQSxZQUFZLFFBQWtCLFVBQW9DLENBQUMsR0FBRztBQUNsRSxVQUFNLEVBQUUsV0FBVyxJQUFJO0FBQ3ZCLFNBQUssVUFBVTtBQUNmLFNBQUssY0FBYyxlQUFlLFNBQVksT0FBTztBQUFBLEVBQ3pEO0FBQUEsRUFFQSxJQUFJLFFBQVE7QUFDUixXQUFPLEtBQUssUUFBUTtBQUFBLEVBQ3hCO0FBQUEsRUFFQSxTQUFTLE1BQXlCO0FBQzlCLFVBQU0sUUFBUSxLQUFLLFFBQVEsTUFBTTtBQUVqQyxRQUFJLFVBQVUsUUFBVztBQUNyQixXQUFLLE9BQU8sR0FBRyxJQUFJO0FBQ25CO0FBQUEsSUFDSjtBQUVBLFVBQU0sVUFBVSxJQUFJLHdCQUF3QixHQUFHLElBQUk7QUFDbkQsUUFBSSxRQUFRLFNBQVMsT0FBTztBQUN4QixXQUFLLE9BQU8sR0FBRyxRQUFRLE1BQU07QUFBQSxJQUNqQyxPQUFPO0FBQ0gsWUFBTSxVQUFVLFFBQVEsS0FBSztBQUU3QixXQUFLLE9BQU8sR0FBRyxRQUFRLEtBQUssUUFBUSxDQUFDLEdBQUcsRUFBRSxNQUFNLGVBQWUsS0FBSyxVQUFLLE9BQU8sRUFBRSxDQUFDO0FBQ25GLGlCQUFXLFNBQVMsU0FBUztBQUN6QixZQUFJLE1BQU0sU0FBUyxjQUFjLE1BQU0sU0FBUyxlQUFlO0FBQzNEO0FBQUEsUUFDSjtBQUNBLGFBQUssT0FBTyxLQUFLO0FBQUEsTUFDckI7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUFBLEVBRUEsUUFBUTtBQUNKLFNBQUssUUFBUSxNQUFNO0FBQUEsRUFDdkI7QUFBQSxFQUVBLFVBQVUsTUFBeUI7QUFDL0IsUUFBSSxLQUFLLGFBQWE7QUFDbEIsV0FBSyxRQUFRLE1BQU0sR0FBRyxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFBQSxJQUNuRCxPQUFPO0FBQ0gsV0FBSyxRQUFRLE1BQU0sR0FBRyxJQUFJO0FBQUEsSUFDOUI7QUFBQSxFQUNKO0FBQ0o7IiwKICAibmFtZXMiOiBbXQp9Cg==
