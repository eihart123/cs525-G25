/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Chars } from "./chars.js";
import { Style } from "./style.js";
function* tokenize(text) {
  for (let pos = 0; pos < text.length; ) {
    const unit = text[pos];
    switch (unit) {
      case "\n":
        yield { kind: "newline" };
        pos++;
        break;
      case "\r":
        if (text[pos + 1] === "\n") {
          yield { kind: "newline" };
          pos += 2;
        } else {
          yield { kind: "carriage-return" };
          pos += 1;
        }
        break;
      case "	":
        yield { kind: "tab" };
        pos++;
        break;
      case "\x1B":
        let valid = false;
        let newColumn;
        const escapeStart = pos;
        pos++;
        switch (text[pos]) {
          case "[":
            pos++;
            while (text[pos] >= "0" && text[pos] <= "?") {
              pos++;
            }
            if (text[pos] >= "\0x40" && text[pos] <= "~") {
              const param = text.slice(escapeStart + 2, pos);
              switch (text[pos]) {
                case "m":
                  yield {
                    kind: "style",
                    style: Style(param)
                  };
                  pos++;
                  continue;
                case "E":
                // Move up
                case "F":
                  newColumn = 0;
                  break;
                case "G":
                  newColumn = Number.parseInt(param);
                  break;
                case "H":
                  const [, column] = param.split(";");
                  newColumn = column ? Number.parseInt(column) : 0;
                  break;
                case "J":
                  switch (param) {
                    case "2":
                    // Entire screen
                    case "3":
                      newColumn = 0;
                  }
                  break;
              }
              pos++;
              valid = true;
            }
            break;
          case "X":
          case "]":
          case "^":
          case "_":
            pos++;
            while (pos < text.length) {
              pos++;
              if (text[pos] === "\\") {
                valid = true;
                break;
              }
            }
            break;
          default:
            const code = text[pos];
            if (code >= "@" && code <= "W" || code >= "Y" && code <= "Z" || code >= "\\" && code <= "]") {
              pos++;
              valid = true;
            } else if (code >= "0" && code <= "0x3f") {
              pos++;
              valid = true;
            } else if (code >= "`" && code <= "0x7e") {
              pos++;
              valid = true;
            } else if (code >= " " && code <= "0x2f") {
              pos++;
              const code2 = text[pos];
              if (code2 >= "0" && code2 <= "0x73") {
                pos++;
                valid = true;
              }
            }
            break;
        }
        if (valid) {
          const token = {
            kind: "ansi",
            sequence: text.slice(escapeStart, pos)
          };
          if (newColumn !== void 0 && !Number.isNaN(newColumn)) {
            token.newColumn = newColumn;
          }
          yield token;
        }
        break;
      default:
        const start = pos;
        if (Chars.breakingSpace.has(unit)) {
          let width2 = 1;
          pos++;
          while (Chars.breakingSpace.has(text[pos])) {
            pos++;
            if (unit !== "\u200B") {
              width2++;
            }
          }
          yield {
            kind: "breaking",
            str: text.slice(start, pos),
            width: width2
          };
          break;
        }
        let width = 0;
        while (pos < text.length) {
          let cp = text[pos];
          if (cp >= "\uD800" && cp < "\uDC00") {
            const nextUnit = text[pos + 1];
            if (nextUnit !== void 0 && nextUnit >= "\uDC00" && nextUnit < "\uE000") {
              cp += nextUnit;
            }
          }
          if (!cp.match(Chars.nonbreakingText)) {
            break;
          }
          pos += cp.length;
          if (!cp.match(Chars.zeroWidth)) {
            width++;
          }
        }
        if (start === pos) {
          pos++;
          break;
        }
        yield {
          kind: "nonbreaking",
          str: text.slice(start, pos),
          width
        };
    }
  }
}
export {
  tokenize
};
//# sourceMappingURL=data:application/json;base64,
