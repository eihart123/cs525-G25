/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Producer } from "./producer.js";
class ContiguousOutputSegment {
  width = 0;
  tokens;
  constructor(...text) {
    this.tokens = [...Producer.of(text)];
    this.#addWidth(this.tokens);
  }
  [Symbol.iterator]() {
    return this.tokens[Symbol.iterator]();
  }
  push(...text) {
    const tokens = [...Producer.of(text)];
    this.tokens.push(...tokens);
    this.#addWidth(tokens);
  }
  #addWidth(tokens) {
    for (const token of tokens) {
      if ("width" in token) {
        this.width += token.width;
      }
    }
  }
  /**
   * Create a scanner that can be used to move through the segment in chunks of visible characters.  This is only
   * necessary when wrapping segments that are too long to fit on a single line.
   */
  scan() {
    let done = false;
    const iterator = this.tokens[Symbol.iterator]();
    let current;
    let pos = 0;
    return {
      [Symbol.iterator]() {
        return iterator;
      },
      get done() {
        return done;
      },
      next() {
        const next = iterator.next();
        if (next.done) {
          done = true;
        }
        return next;
      },
      take(width) {
        let widthSoFar = 0;
        const result = Array();
        while (true) {
          if (current !== void 0) {
            const splitStart = pos;
            let splitWidth = 0;
            for (let i = splitStart; i < current.str.length; i++) {
              const charCode = current.str.charCodeAt(0);
              switch (charCode) {
                case 8203:
                case 8204:
                case 8205:
                case 8288:
                case 65279:
                  continue;
              }
              if (widthSoFar === width) {
                pos = i;
                if (splitStart !== pos) {
                  result.push({
                    kind: current.kind,
                    str: current.str.slice(splitStart, pos),
                    width: splitWidth
                  });
                }
                return result;
              }
              widthSoFar++;
              splitWidth++;
              if (charCode >= 55296 && charCode < 56320) {
                const charCode2 = current.str.charCodeAt(i + 1);
                if (charCode2 !== void 0 && charCode2 >= 56320 && charCode2 < 57344) {
                  i++;
                }
              }
            }
            if (splitStart === 0) {
              result.push(current);
            } else {
              result.push({
                kind: current.kind,
                str: current.str.slice(splitStart),
                width: splitWidth
              });
            }
            current = void 0;
          }
          const n = this.next();
          if (n.done) {
            return result;
          }
          if (n.value.kind !== "breaking" && n.value.kind !== "nonbreaking") {
            result.push(n.value);
            continue;
          }
          current = n.value;
        }
      }
    };
  }
  toString() {
    return this.tokens.map((token) => {
      switch (token.kind) {
        case "style":
          return token.style.toString();
        case "ansi":
          return token.sequence;
        case "breaking":
        case "nonbreaking":
          return token.str;
        case "tab":
          return "	";
        case "carriage-return":
          return "\r";
        case "newline":
          return "\n";
      }
    }).join("");
  }
}
export {
  ContiguousOutputSegment
};
//# sourceMappingURL=data:application/json;base64,
