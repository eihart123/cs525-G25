/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Producer } from "./producer.js";
import {
  Color,
  ExtendedColor,
  SgrOpcode,
  SgrOpcodeBlock,
  SgrOpcodeToUndoOpcode
} from "./sgr.js";
import { Style } from "./style.js";
import { TextWriter } from "./text-writer.js";
function TextBuilder(definition, derivesFrom, state) {
  if (derivesFrom instanceof TextBuilder) {
    state = { ...derivesFrom.state, ...state };
  } else if (state === void 0) {
    state = {};
  }
  definition = Style.definitionOf(definition);
  const self = function TextBuilderInstance(...text) {
    const sequence = self.state.sequence ? [...self.state.sequence] : [];
    if (self.styleDefinition?.length) {
      sequence.push(self.styleToken);
    }
    sequence.push(...text);
    return TextBuilder(self, self, { sequence, revert: true });
  };
  Object.setPrototypeOf(self, TextBuilder.prototype);
  self.state = state;
  if (definition !== void 0) {
    self.styleDefinition = definition;
  }
  return self;
}
TextBuilder.prototype = Object.create(Style.prototype, {
  bg: chmode({ bg: true }),
  not: chmode({ not: true }),
  bold: toggle("bold"),
  dim: toggle("dim"),
  bright: chmode({ bright: true }),
  italic: toggle("italic"),
  underline: toggle("underline"),
  doubleUnderline: toggle("doubleUnderline"),
  slowBlink: toggle("slowBlink"),
  fastBlink: toggle("fastBlink"),
  invert: toggle("invert"),
  conceal: toggle("conceal"),
  strike: toggle("strike"),
  black: color("black"),
  red: color("red"),
  green: color("green"),
  yellow: color("yellow"),
  blue: color("blue"),
  magenta: color("magenta"),
  cyan: color("cyan"),
  white: color("white"),
  reset: {
    get() {
      return this.addStyle([0]);
    }
  },
  color: {
    value(color2) {
      if (this.state.not) {
        return this.addStyle([this.state.bg ? SgrOpcode.normalBg : SgrOpcode.normalFg]);
      }
      if (typeof color2 === "object") {
        if ("color" in color2) {
          return this.addStyle([Color.extended, ExtendedColor.eightBit, color2.color]);
        }
        return this.addStyle([Color.extended, ExtendedColor.rgb, color2.r ?? 0, color2.g ?? 0, color2.b ?? 0]);
      }
      const block = this.state.bg ? this.state.bright ? SgrOpcodeBlock.bgBright : SgrOpcodeBlock.bg : this.state.bright ? SgrOpcodeBlock.fgBright : SgrOpcodeBlock.fg;
      return this.addStyle([block + color2]);
    }
  },
  toString: {
    value() {
      let { sequence } = this.state;
      if (!sequence) {
        sequence = [this.styleToken];
      }
      if (this.state.revert) {
        sequence = [...sequence, this.undoStyle.styleToken];
      }
      const parts = Array();
      const writer = new TextWriter((part) => parts.push(part));
      writer.write(...sequence);
      writer.close();
      return parts.join("");
    }
  },
  [Symbol.iterator]: {
    get() {
      if (this.state.sequence === void 0) {
        return {
          next() {
            return void 0;
          },
          done: true
        };
      }
      let sequence = this.state.sequence;
      if (this.state.revert) {
        sequence = [...sequence, this.undoStyle.styleToken];
      }
      const iterable = Producer.of(sequence);
      return iterable[Symbol.iterator].bind(iterable);
    }
  },
  factory: {
    value: TextBuilder
  }
});
function chmode(state) {
  return {
    get() {
      return TextBuilder(this, this, state);
    }
  };
}
function toggle(name) {
  const on = SgrOpcode[name];
  const off = SgrOpcodeToUndoOpcode[on];
  if (off === void 0) {
    throw new Error(`Can't toggle opcode ${on}`);
  }
  return {
    get() {
      return this.addStyle([this.state.not ? off : on]);
    }
  };
}
function color(color2) {
  const opcode = Color[color2];
  return {
    get() {
      return this.color(opcode);
    }
  };
}
const ansi = TextBuilder();
export {
  TextBuilder,
  ansi
};
//# sourceMappingURL=data:application/json;base64,
