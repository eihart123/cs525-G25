/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Producer } from "./producer.js";
import { Truncator } from "./truncator.js";
import { Wrapper } from "./wrapper.js";
function Printer(target, options) {
  target = options?.wrap ? new Wrapper(target, options.wrap) : target;
  let truncator;
  const printer = function Printer2(...text) {
    printer.write(...text);
  };
  Object.defineProperties(printer, {
    target: {
      get() {
        return target;
      }
    },
    state: {
      get() {
        return target.state;
      }
    },
    write: {
      value(...text) {
        target.write(...text);
      }
    },
    close: {
      value() {
        target.close();
      }
    },
    writeTruncated: {
      value(...text) {
        if (!truncator) {
          truncator = new Truncator(target, { addNewline: false });
        }
        truncator.write(...text);
      }
    },
    writeTruncatedLine: {
      value(...text) {
        const tokens = [...Producer.of(text)].filter(
          (token) => token.kind !== "newline" && token.kind !== "carriage-return"
        );
        if (!truncator) {
          truncator = new Truncator(target);
        }
        truncator.write(...tokens);
      }
    }
  });
  return printer;
}
export {
  Printer
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2Fuc2ktdGV4dC9wcmludGVyLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMi0yMDI1IE1hdHRlci5qcyBBdXRob3JzXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7IENvbnN1bWVyIH0gZnJvbSBcIi4vY29uc3VtZXIuanNcIjtcbmltcG9ydCB7IFByb2R1Y2VyIH0gZnJvbSBcIi4vcHJvZHVjZXIuanNcIjtcbmltcG9ydCB7IFRydW5jYXRvciB9IGZyb20gXCIuL3RydW5jYXRvci5qc1wiO1xuaW1wb3J0IHsgV3JhcHBlciB9IGZyb20gXCIuL3dyYXBwZXIuanNcIjtcblxuLyoqXG4gKiBUZXh0IG91dHB1dCB3aXRoIGhpZ2gtbGV2ZWwgZm9ybWF0dGluZyBmdW5jdGlvbmFsaXR5LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFByaW50ZXIgZXh0ZW5kcyBDb25zdW1lciB7XG4gICAgKC4uLnRleHQ6IFByb2R1Y2VyLlNlcXVlbmNlKTogdm9pZDtcblxuICAgIHRhcmdldDogQ29uc3VtZXI7XG5cbiAgICB3cml0ZVRydW5jYXRlZCguLi50ZXh0OiBQcm9kdWNlci5TZXF1ZW5jZSk6IHZvaWQ7XG4gICAgd3JpdGVUcnVuY2F0ZWRMaW5lKC4uLnRleHQ6IFByb2R1Y2VyLlNlcXVlbmNlKTogdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFByaW50ZXIodGFyZ2V0OiBDb25zdW1lciwgb3B0aW9ucz86IFByaW50ZXIuT3B0aW9ucykge1xuICAgIHRhcmdldCA9IG9wdGlvbnM/LndyYXAgPyBuZXcgV3JhcHBlcih0YXJnZXQsIG9wdGlvbnMud3JhcCkgOiB0YXJnZXQ7XG4gICAgbGV0IHRydW5jYXRvcjogdW5kZWZpbmVkIHwgVHJ1bmNhdG9yO1xuXG4gICAgY29uc3QgcHJpbnRlciA9IGZ1bmN0aW9uIFByaW50ZXIoLi4udGV4dDogUHJvZHVjZXIuU2VxdWVuY2UpIHtcbiAgICAgICAgcHJpbnRlci53cml0ZSguLi50ZXh0KTtcbiAgICB9IGFzIFByaW50ZXI7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhwcmludGVyLCB7XG4gICAgICAgIHRhcmdldDoge1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuXG4gICAgICAgIHN0YXRlOiB7XG4gICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5zdGF0ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG5cbiAgICAgICAgd3JpdGU6IHtcbiAgICAgICAgICAgIHZhbHVlKC4uLnRleHQ6IFByb2R1Y2VyLlNlcXVlbmNlKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LndyaXRlKC4uLnRleHQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcblxuICAgICAgICBjbG9zZToge1xuICAgICAgICAgICAgdmFsdWUoKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LmNsb3NlKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuXG4gICAgICAgIHdyaXRlVHJ1bmNhdGVkOiB7XG4gICAgICAgICAgICB2YWx1ZSguLi50ZXh0OiBzdHJpbmdbXSkge1xuICAgICAgICAgICAgICAgIGlmICghdHJ1bmNhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRydW5jYXRvciA9IG5ldyBUcnVuY2F0b3IodGFyZ2V0LCB7IGFkZE5ld2xpbmU6IGZhbHNlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cnVuY2F0b3Iud3JpdGUoLi4udGV4dCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuXG4gICAgICAgIHdyaXRlVHJ1bmNhdGVkTGluZToge1xuICAgICAgICAgICAgdmFsdWUoLi4udGV4dDogc3RyaW5nW10pIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b2tlbnMgPSBbLi4uUHJvZHVjZXIub2YodGV4dCldLmZpbHRlcihcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4gPT4gdG9rZW4ua2luZCAhPT0gXCJuZXdsaW5lXCIgJiYgdG9rZW4ua2luZCAhPT0gXCJjYXJyaWFnZS1yZXR1cm5cIixcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmICghdHJ1bmNhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRydW5jYXRvciA9IG5ldyBUcnVuY2F0b3IodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHJ1bmNhdG9yLndyaXRlKC4uLnRva2Vucyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHByaW50ZXI7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgUHJpbnRlciB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBPcHRpb25zIGV4dGVuZHMgQ29uc3VtZXIuT3B0aW9ucyB7XG4gICAgICAgIHdyYXA/OiBXcmFwcGVyLk9wdGlvbnM7XG4gICAgfVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQU9BLFNBQVMsZ0JBQWdCO0FBQ3pCLFNBQVMsaUJBQWlCO0FBQzFCLFNBQVMsZUFBZTtBQWNqQixTQUFTLFFBQVEsUUFBa0IsU0FBMkI7QUFDakUsV0FBUyxTQUFTLE9BQU8sSUFBSSxRQUFRLFFBQVEsUUFBUSxJQUFJLElBQUk7QUFDN0QsTUFBSTtBQUVKLFFBQU0sVUFBVSxTQUFTQSxZQUFXLE1BQXlCO0FBQ3pELFlBQVEsTUFBTSxHQUFHLElBQUk7QUFBQSxFQUN6QjtBQUVBLFNBQU8saUJBQWlCLFNBQVM7QUFBQSxJQUM3QixRQUFRO0FBQUEsTUFDSixNQUFNO0FBQ0YsZUFBTztBQUFBLE1BQ1g7QUFBQSxJQUNKO0FBQUEsSUFFQSxPQUFPO0FBQUEsTUFDSCxNQUFNO0FBQ0YsZUFBTyxPQUFPO0FBQUEsTUFDbEI7QUFBQSxJQUNKO0FBQUEsSUFFQSxPQUFPO0FBQUEsTUFDSCxTQUFTLE1BQXlCO0FBQzlCLGVBQU8sTUFBTSxHQUFHLElBQUk7QUFBQSxNQUN4QjtBQUFBLElBQ0o7QUFBQSxJQUVBLE9BQU87QUFBQSxNQUNILFFBQVE7QUFDSixlQUFPLE1BQU07QUFBQSxNQUNqQjtBQUFBLElBQ0o7QUFBQSxJQUVBLGdCQUFnQjtBQUFBLE1BQ1osU0FBUyxNQUFnQjtBQUNyQixZQUFJLENBQUMsV0FBVztBQUNaLHNCQUFZLElBQUksVUFBVSxRQUFRLEVBQUUsWUFBWSxNQUFNLENBQUM7QUFBQSxRQUMzRDtBQUNBLGtCQUFVLE1BQU0sR0FBRyxJQUFJO0FBQUEsTUFDM0I7QUFBQSxJQUNKO0FBQUEsSUFFQSxvQkFBb0I7QUFBQSxNQUNoQixTQUFTLE1BQWdCO0FBQ3JCLGNBQU0sU0FBUyxDQUFDLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFO0FBQUEsVUFDbEMsV0FBUyxNQUFNLFNBQVMsYUFBYSxNQUFNLFNBQVM7QUFBQSxRQUN4RDtBQUNBLFlBQUksQ0FBQyxXQUFXO0FBQ1osc0JBQVksSUFBSSxVQUFVLE1BQU07QUFBQSxRQUNwQztBQUNBLGtCQUFVLE1BQU0sR0FBRyxNQUFNO0FBQUEsTUFDN0I7QUFBQSxJQUNKO0FBQUEsRUFDSixDQUFDO0FBRUQsU0FBTztBQUNYOyIsCiAgIm5hbWVzIjogWyJQcmludGVyIl0KfQo=
