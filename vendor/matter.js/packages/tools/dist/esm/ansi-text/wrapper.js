/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { ContiguousOutputSegment } from "./contiguous-output-segment.js";
import { Producer } from "./producer.js";
import { Style } from "./style.js";
import { tokenize } from "./tokenize.js";
const NEWLINE = { kind: "newline" };
const SPACE = { kind: "nonbreaking", str: " ", width: 1 };
class Wrapper {
  #target;
  #wrapPrefix;
  #preserveIndent;
  #splitStyling;
  #inputState = "newline";
  #outputState = "newline";
  #indent;
  #output;
  #onRevert = () => {
    this.#emit();
  };
  constructor(target, options) {
    const { wrapPrefix, preserveIndent, splitStyling } = options;
    this.#target = target;
    if (wrapPrefix !== void 0) {
      this.#wrapPrefix = new ContiguousOutputSegment(...tokenize(wrapPrefix));
    }
    this.#preserveIndent = preserveIndent ?? true;
    this.#splitStyling = splitStyling ?? !!(this.#preserveIndent || this.#wrapPrefix || !this.#target.state.linePrefix);
    this.#target.state.onRevert(this.#onRevert);
  }
  get state() {
    return this.#target.state;
  }
  write(...text) {
    if (this.#target.state.terminalWidth === void 0) {
      this.#target.write(...text);
      return;
    }
    for (const token of Producer.of(text)) {
      this.#addToken(token);
    }
  }
  close() {
    this.#emit();
    this.#target.state.offRevert(this.#onRevert);
    this.#target.close();
  }
  [Symbol.dispose]() {
    this.close();
  }
  #addToken(token) {
    switch (token.kind) {
      case "newline":
      case "carriage-return":
        this.#emit();
        this.#target.write(token);
        this.#indent = void 0;
        this.#outputState = this.#inputState = "newline";
        break;
      case "ansi":
        this.#enqueue(token);
        switch (token.sequence) {
          case Wrapper.prefixStart:
            this.#inputState = "prefix";
            break;
          case Wrapper.prefixStop:
            this.#inputState = "indent";
            break;
        }
        break;
      case "style":
        this.#enqueue(token);
        break;
      case "nonbreaking":
        if (this.#inputState === "prefix") {
          this.#enqueue(token);
          break;
        }
        if (this.#inputState === "indent") {
          this.#indent = this.#output;
          this.#output = void 0;
        }
        this.#inputState = "word";
        this.#enqueue(token);
        break;
      case "tab":
      case "breaking":
        switch (this.#inputState) {
          case "newline":
            if (this.#preserveIndent) {
              this.#enqueue(token);
            }
            this.#inputState = "indent";
            break;
          case "prefix":
          case "indent":
            this.#enqueue(token);
            break;
          case "word":
            this.#emit();
            this.#inputState = "space";
            break;
        }
        break;
    }
  }
  #emit() {
    if (this.#output === void 0) {
      return;
    }
    const outputState = this.#outputState;
    if (outputState === "newline") {
      this.#emitPrefix();
    }
    this.#outputState = "inline";
    const output = this.#output;
    this.#output = void 0;
    let remainingWidth = this.#target.state.remainingWidth;
    if (remainingWidth !== void 0 && outputState === "inline") {
      remainingWidth--;
    }
    if (remainingWidth === void 0 || output.width <= remainingWidth) {
      if (outputState === "inline") {
        this.#target.write(SPACE);
      }
      this.#target.write(...output.tokens);
      return;
    }
    const wrapPrefixWidth = (this.#wrapPrefix?.width ?? 0) + (this.#indent?.width ?? 0);
    const availableWrappedWidth = this.#target.state.availableWidth - wrapPrefixWidth;
    if (outputState === "newline" && remainingWidth <= 0 || availableWrappedWidth < 0) {
      this.#target.write(...output.tokens);
      return;
    }
    if (output.width < availableWrappedWidth) {
      this.#wrap();
      this.#target.write(...output.tokens);
      return;
    }
    const scanner = output.scan();
    if (outputState === "inline") {
      this.#target.write(SPACE);
    }
    this.#target.write(...scanner.take(remainingWidth));
    while (!scanner.done) {
      this.#wrap();
      this.#target.write(...scanner.take(availableWrappedWidth));
    }
  }
  #emitPrefix(extra) {
    if (this.#indent !== void 0) {
      this.#target.write(...this.#indent.tokens);
    }
    if (extra !== void 0) {
      this.#target.write(...extra.tokens);
    }
  }
  #wrap() {
    let style;
    if (this.#splitStyling) {
      style = this.#target.state.style;
      this.#target.write({ kind: "style", style: Style.None });
    }
    this.#target.write(NEWLINE);
    this.#emitPrefix(this.#wrapPrefix);
    if (style) {
      this.#target.write({ kind: "style", style });
    }
  }
  #enqueue(token) {
    if (this.#output) {
      this.#output.push(token);
    } else {
      this.#output = new ContiguousOutputSegment(token);
    }
  }
}
((Wrapper2) => {
  Wrapper2.prefixStart = "\x1B[<<~";
  Wrapper2.prefixStop = "\x1B[>>~";
})(Wrapper || (Wrapper = {}));
export {
  Wrapper
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2Fuc2ktdGV4dC93cmFwcGVyLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMi0yMDI1IE1hdHRlci5qcyBBdXRob3JzXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7IENvbnN1bWVyIH0gZnJvbSBcIi4vY29uc3VtZXIuanNcIjtcbmltcG9ydCB7IENvbnRpZ3VvdXNPdXRwdXRTZWdtZW50IH0gZnJvbSBcIi4vY29udGlndW91cy1vdXRwdXQtc2VnbWVudC5qc1wiO1xuaW1wb3J0IHsgUHJvZHVjZXIgfSBmcm9tIFwiLi9wcm9kdWNlci5qc1wiO1xuaW1wb3J0IHsgU3R5bGUgfSBmcm9tIFwiLi9zdHlsZS5qc1wiO1xuaW1wb3J0IHsgdHlwZSBUZXh0V3JpdGVyIH0gZnJvbSBcIi4vdGV4dC13cml0ZXIuanNcIjtcbmltcG9ydCB7IFRva2VuIH0gZnJvbSBcIi4vdG9rZW4uanNcIjtcbmltcG9ydCB7IHRva2VuaXplIH0gZnJvbSBcIi4vdG9rZW5pemUuanNcIjtcblxuY29uc3QgTkVXTElORTogVG9rZW4gPSB7IGtpbmQ6IFwibmV3bGluZVwiIH07XG5jb25zdCBTUEFDRTogVG9rZW4gPSB7IGtpbmQ6IFwibm9uYnJlYWtpbmdcIiwgc3RyOiBcIiBcIiwgd2lkdGg6IDEgfTtcblxuLyoqXG4gKiBXcml0ZXMgdG8gYSB7QGxpbmsgVGV4dFdyaXRlcn0gd2l0aCBzdXBwb3J0IGZvciBzbWFydCB3cmFwcGluZyBvZiB0ZXh0LlxuICovXG5leHBvcnQgY2xhc3MgV3JhcHBlciBpbXBsZW1lbnRzIENvbnN1bWVyIHtcbiAgICAjdGFyZ2V0OiBDb25zdW1lcjtcbiAgICAjd3JhcFByZWZpeD86IENvbnRpZ3VvdXNPdXRwdXRTZWdtZW50O1xuICAgICNwcmVzZXJ2ZUluZGVudDogYm9vbGVhbjtcbiAgICAjc3BsaXRTdHlsaW5nOiBib29sZWFuO1xuICAgICNpbnB1dFN0YXRlOiBcIm5ld2xpbmVcIiB8IFwicHJlZml4XCIgfCBcImluZGVudFwiIHwgXCJ3b3JkXCIgfCBcInNwYWNlXCIgPSBcIm5ld2xpbmVcIjtcbiAgICAjb3V0cHV0U3RhdGU6IFwibmV3bGluZVwiIHwgXCJuZXd3cmFwXCIgfCBcImlubGluZVwiID0gXCJuZXdsaW5lXCI7XG4gICAgI2luZGVudD86IENvbnRpZ3VvdXNPdXRwdXRTZWdtZW50O1xuICAgICNvdXRwdXQ/OiBDb250aWd1b3VzT3V0cHV0U2VnbWVudDtcbiAgICAjb25SZXZlcnQgPSAoKSA9PiB7XG4gICAgICAgIC8vIFdoZW4gc3RhdGUgcmV2ZXJ0cyB3ZSBtYXkgaGF2ZSBidWZmZXJlZCBvdXRwdXQgd2UgaGF2ZSB5ZXQgdG8gZW1pdC4gIERvIHNvIG5vdyB0byBlbnN1cmUgaXQgcmVjZWl2ZXMgcHJvcGVyXG4gICAgICAgIC8vIHN0eWxpbmdcbiAgICAgICAgdGhpcy4jZW1pdCgpO1xuICAgIH07XG5cbiAgICBjb25zdHJ1Y3Rvcih0YXJnZXQ6IENvbnN1bWVyLCBvcHRpb25zOiBXcmFwcGVyLk9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyB3cmFwUHJlZml4LCBwcmVzZXJ2ZUluZGVudCwgc3BsaXRTdHlsaW5nIH0gPSBvcHRpb25zO1xuXG4gICAgICAgIHRoaXMuI3RhcmdldCA9IHRhcmdldDtcbiAgICAgICAgaWYgKHdyYXBQcmVmaXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy4jd3JhcFByZWZpeCA9IG5ldyBDb250aWd1b3VzT3V0cHV0U2VnbWVudCguLi50b2tlbml6ZSh3cmFwUHJlZml4KSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jcHJlc2VydmVJbmRlbnQgPSBwcmVzZXJ2ZUluZGVudCA/PyB0cnVlO1xuICAgICAgICB0aGlzLiNzcGxpdFN0eWxpbmcgPVxuICAgICAgICAgICAgc3BsaXRTdHlsaW5nID8/ICEhKHRoaXMuI3ByZXNlcnZlSW5kZW50IHx8IHRoaXMuI3dyYXBQcmVmaXggfHwgIXRoaXMuI3RhcmdldC5zdGF0ZS5saW5lUHJlZml4KTtcblxuICAgICAgICB0aGlzLiN0YXJnZXQuc3RhdGUub25SZXZlcnQodGhpcy4jb25SZXZlcnQpO1xuICAgIH1cblxuICAgIGdldCBzdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3RhcmdldC5zdGF0ZTtcbiAgICB9XG5cbiAgICB3cml0ZSguLi50ZXh0OiBQcm9kdWNlci5TZXF1ZW5jZSkge1xuICAgICAgICBpZiAodGhpcy4jdGFyZ2V0LnN0YXRlLnRlcm1pbmFsV2lkdGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy4jdGFyZ2V0LndyaXRlKC4uLnRleHQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCB0b2tlbiBvZiBQcm9kdWNlci5vZih0ZXh0KSkge1xuICAgICAgICAgICAgdGhpcy4jYWRkVG9rZW4odG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuI2VtaXQoKTtcbiAgICAgICAgdGhpcy4jdGFyZ2V0LnN0YXRlLm9mZlJldmVydCh0aGlzLiNvblJldmVydCk7XG4gICAgICAgIHRoaXMuI3RhcmdldC5jbG9zZSgpO1xuICAgIH1cblxuICAgIFtTeW1ib2wuZGlzcG9zZV0oKSB7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG5cbiAgICAjYWRkVG9rZW4odG9rZW46IFRva2VuKSB7XG4gICAgICAgIHN3aXRjaCAodG9rZW4ua2luZCkge1xuICAgICAgICAgICAgY2FzZSBcIm5ld2xpbmVcIjpcbiAgICAgICAgICAgIGNhc2UgXCJjYXJyaWFnZS1yZXR1cm5cIjpcbiAgICAgICAgICAgICAgICB0aGlzLiNlbWl0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy4jdGFyZ2V0LndyaXRlKHRva2VuKTtcbiAgICAgICAgICAgICAgICB0aGlzLiNpbmRlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy4jb3V0cHV0U3RhdGUgPSB0aGlzLiNpbnB1dFN0YXRlID0gXCJuZXdsaW5lXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJhbnNpXCI6XG4gICAgICAgICAgICAgICAgdGhpcy4jZW5xdWV1ZSh0b2tlbik7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRva2VuLnNlcXVlbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgV3JhcHBlci5wcmVmaXhTdGFydDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI2lucHV0U3RhdGUgPSBcInByZWZpeFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBXcmFwcGVyLnByZWZpeFN0b3A6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNpbnB1dFN0YXRlID0gXCJpbmRlbnRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICAgICAgICAgICAgdGhpcy4jZW5xdWV1ZSh0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJub25icmVha2luZ1wiOlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLiNpbnB1dFN0YXRlID09PSBcInByZWZpeFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI2VucXVldWUodG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuI2lucHV0U3RhdGUgPT09IFwiaW5kZW50XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jaW5kZW50ID0gdGhpcy4jb3V0cHV0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiNvdXRwdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuI2lucHV0U3RhdGUgPSBcIndvcmRcIjtcbiAgICAgICAgICAgICAgICB0aGlzLiNlbnF1ZXVlKHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcInRhYlwiOlxuICAgICAgICAgICAgY2FzZSBcImJyZWFraW5nXCI6XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLiNpbnB1dFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJuZXdsaW5lXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4jcHJlc2VydmVJbmRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNlbnF1ZXVlKHRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI2lucHV0U3RhdGUgPSBcImluZGVudFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInByZWZpeFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW5kZW50XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNlbnF1ZXVlKHRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ3b3JkXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNlbWl0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNpbnB1dFN0YXRlID0gXCJzcGFjZVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgI2VtaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLiNvdXRwdXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgb3V0cHV0U3RhdGUgPSB0aGlzLiNvdXRwdXRTdGF0ZTtcbiAgICAgICAgaWYgKG91dHB1dFN0YXRlID09PSBcIm5ld2xpbmVcIikge1xuICAgICAgICAgICAgdGhpcy4jZW1pdFByZWZpeCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI291dHB1dFN0YXRlID0gXCJpbmxpbmVcIjtcblxuICAgICAgICBjb25zdCBvdXRwdXQgPSB0aGlzLiNvdXRwdXQ7XG4gICAgICAgIHRoaXMuI291dHB1dCA9IHVuZGVmaW5lZDtcblxuICAgICAgICBsZXQgcmVtYWluaW5nV2lkdGggPSB0aGlzLiN0YXJnZXQuc3RhdGUucmVtYWluaW5nV2lkdGghO1xuXG4gICAgICAgIC8vIExlYXZlIHJvb20gZm9yIGEgc3BhY2UgZXhjZXB0IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGxpbmVcbiAgICAgICAgaWYgKHJlbWFpbmluZ1dpZHRoICE9PSB1bmRlZmluZWQgJiYgb3V0cHV0U3RhdGUgPT09IFwiaW5saW5lXCIpIHtcbiAgICAgICAgICAgIHJlbWFpbmluZ1dpZHRoLS07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZGVhbCBjYXNlIC0gbm90IHdyYXBwaW5nIG9yIHNlZ21lbnQgZml0cyBvbiBjdXJyZW50IGxpbmVcbiAgICAgICAgaWYgKHJlbWFpbmluZ1dpZHRoID09PSB1bmRlZmluZWQgfHwgb3V0cHV0LndpZHRoIDw9IHJlbWFpbmluZ1dpZHRoKSB7XG4gICAgICAgICAgICBpZiAob3V0cHV0U3RhdGUgPT09IFwiaW5saW5lXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiN0YXJnZXQud3JpdGUoU1BBQ0UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy4jdGFyZ2V0LndyaXRlKC4uLm91dHB1dC50b2tlbnMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTGVhc3QgaWRlYWwgY2FzZSAtIHRoZSBmaXJzdC0gb3IgdGVydGlhcnktIHByZWZpeCBmaWxscyB1cCB0aGUgbGluZSBieSBpdHNlbGYuICBHaXZlIHVwIG9uIHdyYXBwaW5nXG4gICAgICAgIGNvbnN0IHdyYXBQcmVmaXhXaWR0aCA9ICh0aGlzLiN3cmFwUHJlZml4Py53aWR0aCA/PyAwKSArICh0aGlzLiNpbmRlbnQ/LndpZHRoID8/IDApO1xuICAgICAgICBjb25zdCBhdmFpbGFibGVXcmFwcGVkV2lkdGggPSB0aGlzLiN0YXJnZXQuc3RhdGUuYXZhaWxhYmxlV2lkdGghIC0gd3JhcFByZWZpeFdpZHRoO1xuICAgICAgICBpZiAoKG91dHB1dFN0YXRlID09PSBcIm5ld2xpbmVcIiAmJiByZW1haW5pbmdXaWR0aCA8PSAwKSB8fCBhdmFpbGFibGVXcmFwcGVkV2lkdGggPCAwKSB7XG4gICAgICAgICAgICB0aGlzLiN0YXJnZXQud3JpdGUoLi4ub3V0cHV0LnRva2Vucyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZWNvbmQgYmVzdCBjYXNlIC0gdGhlIHNlZ21lbnQgZml0cyBvbiBhIG5ldyBsaW5lXG4gICAgICAgIGlmIChvdXRwdXQud2lkdGggPCBhdmFpbGFibGVXcmFwcGVkV2lkdGgpIHtcbiAgICAgICAgICAgIHRoaXMuI3dyYXAoKTtcbiAgICAgICAgICAgIHRoaXMuI3RhcmdldC53cml0ZSguLi5vdXRwdXQudG9rZW5zKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoaXJkIGJlc3QgY2FzZSAtIHdlIG5lZWQgdG8gd3JhcCB0aGUgc2VnbWVudCBpdHNlbGZcbiAgICAgICAgY29uc3Qgc2Nhbm5lciA9IG91dHB1dC5zY2FuKCk7XG4gICAgICAgIGlmIChvdXRwdXRTdGF0ZSA9PT0gXCJpbmxpbmVcIikge1xuICAgICAgICAgICAgdGhpcy4jdGFyZ2V0LndyaXRlKFNQQUNFKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiN0YXJnZXQud3JpdGUoLi4uc2Nhbm5lci50YWtlKHJlbWFpbmluZ1dpZHRoKSk7XG4gICAgICAgIHdoaWxlICghc2Nhbm5lci5kb25lKSB7XG4gICAgICAgICAgICB0aGlzLiN3cmFwKCk7XG4gICAgICAgICAgICB0aGlzLiN0YXJnZXQud3JpdGUoLi4uc2Nhbm5lci50YWtlKGF2YWlsYWJsZVdyYXBwZWRXaWR0aCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgI2VtaXRQcmVmaXgoZXh0cmE/OiBDb250aWd1b3VzT3V0cHV0U2VnbWVudCkge1xuICAgICAgICBpZiAodGhpcy4jaW5kZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuI3RhcmdldC53cml0ZSguLi50aGlzLiNpbmRlbnQudG9rZW5zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXh0cmEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy4jdGFyZ2V0LndyaXRlKC4uLmV4dHJhLnRva2Vucyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAjd3JhcCgpIHtcbiAgICAgICAgbGV0IHN0eWxlOiBTdHlsZSB8IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHRoaXMuI3NwbGl0U3R5bGluZykge1xuICAgICAgICAgICAgc3R5bGUgPSB0aGlzLiN0YXJnZXQuc3RhdGUuc3R5bGU7XG4gICAgICAgICAgICB0aGlzLiN0YXJnZXQud3JpdGUoeyBraW5kOiBcInN0eWxlXCIsIHN0eWxlOiBTdHlsZS5Ob25lIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI3RhcmdldC53cml0ZShORVdMSU5FKTtcbiAgICAgICAgdGhpcy4jZW1pdFByZWZpeCh0aGlzLiN3cmFwUHJlZml4KTtcbiAgICAgICAgaWYgKHN0eWxlKSB7XG4gICAgICAgICAgICB0aGlzLiN0YXJnZXQud3JpdGUoeyBraW5kOiBcInN0eWxlXCIsIHN0eWxlIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgI2VucXVldWUodG9rZW46IFRva2VuKSB7XG4gICAgICAgIGlmICh0aGlzLiNvdXRwdXQpIHtcbiAgICAgICAgICAgIHRoaXMuI291dHB1dC5wdXNoKHRva2VuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuI291dHB1dCA9IG5ldyBDb250aWd1b3VzT3V0cHV0U2VnbWVudCh0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgV3JhcHBlciB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBPcHRpb25zIHtcbiAgICAgICAgd3JhcFByZWZpeD86IHN0cmluZztcbiAgICAgICAgcHJlc2VydmVJbmRlbnQ/OiBib29sZWFuO1xuICAgICAgICBzcGxpdFN0eWxpbmc/OiBib29sZWFuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByaXZhdGUgLSBiZWdpbiBkZW1hcmNhdGlvbiBvZiBsaW5lIHByZWZpeC5cbiAgICAgKi9cbiAgICBleHBvcnQgY29uc3QgcHJlZml4U3RhcnQgPSBcIlxceDFiWzw8flwiO1xuXG4gICAgLyoqXG4gICAgICogUHJpdmF0ZSAtIGVuZCBkZW1hcmNhdGlvbiBvZiBsaW5lIHByZWZpeC5cbiAgICAgKi9cbiAgICBleHBvcnQgY29uc3QgcHJlZml4U3RvcCA9IFwiXFx4MWJbPj5+XCI7XG59XG4iXSwKICAibWFwcGluZ3MiOiAiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBT0EsU0FBUywrQkFBK0I7QUFDeEMsU0FBUyxnQkFBZ0I7QUFDekIsU0FBUyxhQUFhO0FBR3RCLFNBQVMsZ0JBQWdCO0FBRXpCLE1BQU0sVUFBaUIsRUFBRSxNQUFNLFVBQVU7QUFDekMsTUFBTSxRQUFlLEVBQUUsTUFBTSxlQUFlLEtBQUssS0FBSyxPQUFPLEVBQUU7QUFL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
