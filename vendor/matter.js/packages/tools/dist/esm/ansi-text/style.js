/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import {
  Color,
  ExtendedColor,
  SgrCategory,
  SgrOpcode,
  SgrOpcodeBlock,
  SgrOpcodeToCategory,
  SgrOpcodeToUndoOpcode
} from "./sgr.js";
const codes = Symbol("codes");
const text = Symbol("text");
function Style(definition) {
  if (definition instanceof Style) {
    return definition;
  }
  const style = Object.create(Style.prototype);
  style.styleDefinition = Style.definitionOf(definition);
  return style;
}
((Style2) => {
  function opcodeOf(code) {
    if (typeof code === "number") {
      return code;
    }
    if (code === "") {
      return 0;
    }
    const opcode = Number.parseInt(code);
    if (Number.isNaN(opcode)) {
      return void 0;
    }
    return opcode;
  }
  Style2.opcodeOf = opcodeOf;
  function codesOf(definition) {
    definition = textOf(definition);
    if (definition === void 0) {
      return [];
    }
    if (definition === "") {
      return [0];
    }
    const parts = definition.split(";");
    const codes2 = Array();
    let pos = 0;
    while (pos < parts.length) {
      const part = parts[pos];
      const opcode = opcodeOf(parts[pos]);
      pos++;
      let expectedParts;
      switch (opcode) {
        case SgrOpcodeBlock.fg + Color.extended:
        case SgrOpcodeBlock.bg + Color.extended:
          switch (opcodeOf(parts[pos])) {
            case ExtendedColor.eightBit:
              expectedParts = 3;
              break;
            case ExtendedColor.rgb:
              expectedParts = 5;
              break;
            default:
              expectedParts = 1;
              break;
          }
          break;
        case void 0:
          continue;
        default:
          expectedParts = 0;
          break;
      }
      let baseCode;
      if (opcode.toString() === part) {
        baseCode = opcode;
      } else {
        baseCode = part;
      }
      if (expectedParts) {
        const codeCount = part.split(":").length;
        if (codeCount < expectedParts) {
          const argParts = expectedParts - codeCount;
          codes2.push([baseCode, ...parts.slice(pos, pos + argParts)].join(";"));
          pos += argParts;
          continue;
        }
      }
      codes2.push(baseCode);
    }
    return codes2;
  }
  Style2.codesOf = codesOf;
  function textOf(definition) {
    if (definition === void 0 || definition === "") {
      return definition;
    }
    definition = definition.trim();
    if (definition[0] === "\x1B" && definition[1] === "[") {
      definition = definition.slice(2);
    }
    if (definition[definition.length - 1] === "m") {
      definition = definition.slice(0, definition.length - 1);
    }
    return definition;
  }
  Style2.textOf = textOf;
  function definitionOf(definition) {
    if (definition !== void 0 && typeof definition !== "string" && !Array.isArray(definition)) {
      return definition.styleDefinition;
    }
    return definition;
  }
  Style2.definitionOf = definitionOf;
})(Style || (Style = {}));
Style.prototype = {
  get styleDefinition() {
    if (this[codes] !== void 0) {
      return this[codes];
    }
    if (this[text] !== void 0) {
      return this[text];
    }
  },
  set styleDefinition(definition) {
    if (typeof definition === "function" || typeof definition === "object" && !Array.isArray(definition)) {
      this.styleDefinition = definition.styleDefinition;
    } else if (typeof definition === "string") {
      this[text] = Style.textOf(definition);
      this[codes] = void 0;
    } else {
      this[codes] = definition;
      this[text] = void 0;
    }
  },
  get styleCodes() {
    if (this[codes] === void 0) {
      this[codes] = Style.codesOf(this[text]);
    }
    return this[codes] ?? [];
  },
  get styleToken() {
    return {
      kind: "style",
      // Do not use this because extension toString() may not do the correct thing
      style: Style(this.styleDefinition)
    };
  },
  get undoStyle() {
    const codes2 = Array();
    for (const code of this.styleCodes) {
      const opcode = Style.opcodeOf(code);
      if (opcode === void 0) {
        continue;
      }
      const undo = SgrOpcodeToUndoOpcode[opcode];
      if (undo === void 0) {
        continue;
      }
      codes2.push(undo);
    }
    return Style(codes2);
  },
  toString() {
    const codes2 = Array();
    for (const code of this.styleCodes) {
      const opcode = Style.opcodeOf(code);
      if (opcode === void 0) {
        continue;
      }
      codes2.push(code);
    }
    return `\x1B[${codes2.join(";")}m`;
  },
  addStyle(codes2) {
    let categories = Array();
    function processor(category, code) {
      if (category === SgrCategory.reset) {
        categories = [SgrOpcode.reset];
      } else {
        categories[category] = code;
      }
    }
    this.evaluateStyle(processor);
    codes2 = Style.definitionOf(codes2);
    if (codes2 !== void 0) {
      Style(codes2).evaluateStyle(processor);
    }
    return this.factory(
      categories.filter((entry) => entry !== void 0),
      this
    );
  },
  diffStyle(other) {
    let current = Array();
    this.evaluateStyle((category, code) => {
      if (category === SgrCategory.reset) {
        current = [];
      } else {
        current[category] = code;
      }
    });
    let target = [...current];
    other.evaluateStyle((category, code) => {
      if (category === SgrCategory.reset) {
        current = [];
        target = [SgrCategory.reset];
      } else if (current[category] === code) {
        target[category] = void 0;
      } else {
        target[category] = code;
      }
    });
    return this.factory(
      target.filter((entry) => entry !== void 0),
      this
    );
  },
  evaluateStyle(processor) {
    for (const code of this.styleCodes) {
      const opcode = Style.opcodeOf(code);
      if (opcode !== void 0) {
        const category = SgrOpcodeToCategory[opcode];
        if (category !== void 0) {
          processor(category, code);
        }
      }
    }
  },
  get factory() {
    return Style;
  },
  [Symbol.iterator]() {
    return [{ kind: "style", style: this }][Symbol.iterator]();
  }
};
Style.Inherit = Style();
Style.None = Style([0]);
export {
  Style
};
//# sourceMappingURL=data:application/json;base64,
