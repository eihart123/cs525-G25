/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { ContiguousOutputSegment } from "./contiguous-output-segment.js";
import { Producer } from "./producer.js";
import { SgrOpcode } from "./sgr.js";
import { Style } from "./style.js";
import { tokenize } from "./tokenize.js";
const DEFAULT_TAB_WIDTH = 4;
class TextWriter {
  tabWidth;
  #terminalWidth;
  #currentLineWidth = 0;
  #out;
  #activeStyle = Style.Inherit;
  #styleDirty = true;
  #currentStyle = Style.Inherit;
  #linePrefix;
  #state;
  #styleEnabled = true;
  #isNewLine = true;
  #buffer;
  #revertHandlers;
  constructor(out, options) {
    const { tabWidth, terminalWidth, linePrefix } = options ?? {};
    this.#out = out;
    this.tabWidth = tabWidth ?? DEFAULT_TAB_WIDTH;
    this.#terminalWidth = terminalWidth;
    if (linePrefix) {
      this.#linePrefix = new ContiguousOutputSegment(...tokenize(linePrefix));
    }
    const self = this;
    this.#state = function state(options2, executor) {
      options2 = { ...options2 };
      const revertTo = { ...self.state, options: options2 };
      const { linePrefix: linePrefix2, style, buffer } = options2;
      if (linePrefix2) {
        if (self.#linePrefix) {
          self.#linePrefix.push(linePrefix2);
        } else {
          self.#linePrefix = new ContiguousOutputSegment(linePrefix2);
        }
      }
      if (style) {
        if (self.#currentStyle) {
          self.#currentStyle = self.#currentStyle.addStyle(style);
        } else {
          self.#currentStyle = style;
        }
        self.#styleDirty = true;
      }
      if (!!buffer !== !!self.#buffer) {
        if (buffer) {
          self.#buffer = [];
        } else {
          self.#buffer = void 0;
        }
      }
      const context = {
        close() {
          if (self.#revertHandlers) {
            for (const fn of self.#revertHandlers) {
              fn();
            }
          }
          if (revertTo.style) {
            revertTo.style = self.#currentStyle.undoStyle.addStyle(revertTo.style);
          } else {
            revertTo.style = Style.None;
          }
          for (const key in revertTo) {
            self.state[key] = revertTo[key];
          }
        },
        [Symbol.dispose]() {
          this.close();
        }
      };
      if (executor) {
        try {
          executor();
        } finally {
          context.close();
        }
      } else {
        return context;
      }
    };
    Object.defineProperties(this.#state, {
      style: {
        get() {
          return self.#currentStyle;
        },
        set(style) {
          self.#currentStyle = style ?? Style.Inherit;
          self.#styleDirty = true;
        },
        enumerable: true
      },
      linePrefix: {
        get() {
          return self.#linePrefix?.toString();
        },
        set(prefix) {
          if (prefix) {
            self.#linePrefix = new ContiguousOutputSegment(...tokenize(prefix));
          } else {
            self.#linePrefix = void 0;
          }
        },
        enumerable: true
      },
      terminalWidth: {
        get() {
          return self.#terminalWidth;
        },
        set(width) {
          self.#terminalWidth = width;
        },
        enumerable: true
      },
      styleEnabled: {
        get() {
          return self.#styleEnabled;
        },
        set(enabled) {
          self.#styleEnabled = enabled;
        },
        enumerable: true
      },
      availableWidth: {
        get() {
          if (self.#terminalWidth === void 0) {
            return void 0;
          }
          if (self.#linePrefix) {
            const width = self.#terminalWidth - self.#linePrefix.width;
            if (width > 0) {
              return width;
            }
            return void 0;
          }
          return self.#terminalWidth;
        }
      },
      remainingWidth: {
        get() {
          if (self.#terminalWidth === void 0) {
            return void 0;
          }
          return self.#terminalWidth - self.#currentLineWidth;
        }
      },
      buffer: {
        get() {
          return !!self.#buffer;
        },
        set(buffering) {
          if (!!self.#buffer === buffering) {
            return;
          }
          if (buffering) {
            self.#buffer = [];
            return;
          }
          if (self.#buffer) {
            self.#out(self.#buffer.join(""));
            self.#buffer = void 0;
          }
        },
        enumerable: true
      },
      onRevert: {
        value(fn) {
          if (!self.#revertHandlers) {
            self.#revertHandlers = /* @__PURE__ */ new Set();
          }
          self.#revertHandlers.add(fn);
        }
      },
      offRevert: {
        value(fn) {
          if (self.#revertHandlers) {
            self.#revertHandlers.add(fn);
          }
        }
      }
    });
  }
  get state() {
    return this.#state;
  }
  write(...text) {
    for (const token of Producer.of(text)) {
      this.#addToken(token);
    }
  }
  close() {
    this.#writeStyle();
  }
  /**
   * Reset styling.
   */
  reset() {
    if (this.#currentStyle.styleCodes.find((code) => code !== SgrOpcode.reset)) {
      this.#currentStyle = Style.None;
      this.#styleDirty = true;
    }
  }
  #addToken(token, forLinePrefix = false) {
    if (this.#isNewLine && this.#linePrefix && !forLinePrefix) {
      this.#isNewLine = false;
      const style = this.#currentStyle;
      this.#currentStyle = Style.None;
      this.#styleDirty = true;
      for (const token2 of this.#linePrefix.tokens) {
        this.#addToken(token2, true);
      }
      this.#currentStyle = style;
      this.#styleDirty = true;
    }
    switch (token.kind) {
      case "newline":
        this.#emitLine("\n");
        break;
      case "carriage-return":
        this.#emitLine("\r");
        break;
      case "tab":
        let width = this.tabWidth - this.#currentLineWidth % this.tabWidth;
        if (width === 0) {
          width = this.tabWidth;
        }
        this.#writeText("".padStart(width));
        this.#currentLineWidth += width;
        break;
      case "breaking":
        this.#writeText(token.str);
        this.#currentLineWidth += token.width;
        break;
      case "style":
        this.#currentStyle = this.#currentStyle.addStyle(token.style);
        this.#styleDirty = true;
        break;
      case "ansi":
        if (this.#styleEnabled) {
          this.#writeText(token.sequence);
        }
        if (token.newColumn !== void 0) {
          if (!this.#currentLineWidth) {
            this.#isNewLine = true;
          }
          this.#currentLineWidth = token.newColumn;
        }
        break;
      case "nonbreaking":
        this.#writeText(token.str);
        this.#currentLineWidth += token.width;
        break;
    }
  }
  #writeText(text) {
    this.#writeStyle();
    this.#emit(text);
  }
  #writeStyle() {
    if (this.#styleDirty && this.#styleEnabled) {
      this.#styleDirty = false;
      this.#emit(this.#activeStyle.diffStyle(this.#currentStyle).toString());
      this.#activeStyle = this.#currentStyle;
    }
  }
  #emit(text) {
    if (this.#buffer) {
      this.#buffer.push(text);
    } else {
      this.#out(text);
    }
  }
  #emitLine(terminator) {
    this.#writeStyle();
    this.#beginLine();
    if (terminator) {
      this.#emit(terminator);
    }
  }
  #beginLine() {
    this.#isNewLine = true;
    this.#currentLineWidth = 0;
  }
}
export {
  TextWriter
};
//# sourceMappingURL=data:application/json;base64,
